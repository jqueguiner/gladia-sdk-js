!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("gladiaio_sdk",[],t):"object"==typeof exports?exports.gladiaio_sdk=t():e.gladiaio_sdk=t()}(window,(function(){return function(){var e={9662:function(e,t,n){var r=n(614),a=n(6330),o=TypeError;e.exports=function(e){if(r(e))return e;throw o(a(e)+" is not a function")}},9483:function(e,t,n){var r=n(4411),a=n(6330),o=TypeError;e.exports=function(e){if(r(e))return e;throw o(a(e)+" is not a constructor")}},6077:function(e,t,n){var r=n(614),a=String,o=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw o("Can't set "+a(e)+" as a prototype")}},5787:function(e,t,n){var r=n(7976),a=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw a("Incorrect invocation")}},9670:function(e,t,n){var r=n(111),a=String,o=TypeError;e.exports=function(e){if(r(e))return e;throw o(a(e)+" is not an object")}},1318:function(e,t,n){var r=n(5656),a=n(1400),o=n(6244),i=function(e){return function(t,n,i){var u,s=r(t),p=o(s),l=a(i,p);if(e&&n!=n){for(;p>l;)if((u=s[l++])!=u)return!0}else for(;p>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},206:function(e,t,n){var r=n(1702);e.exports=r([].slice)},7072:function(e,t,n){var r=n(5112)("iterator"),a=!1;try{var o=0,i={next:function(){return{done:!!o++}},return:function(){a=!0}};i[r]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},e(o)}catch(e){}return n}},4326:function(e,t,n){var r=n(1702),a=r({}.toString),o=r("".slice);e.exports=function(e){return o(a(e),8,-1)}},648:function(e,t,n){var r=n(1694),a=n(614),o=n(4326),i=n(5112)("toStringTag"),u=Object,s="Arguments"==o(function(){return arguments}());e.exports=r?o:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=u(e),i))?n:s?o(t):"Object"==(r=o(t))&&a(t.callee)?"Arguments":r}},9920:function(e,t,n){var r=n(2597),a=n(3887),o=n(1236),i=n(3070);e.exports=function(e,t,n){for(var u=a(t),s=i.f,p=o.f,l=0;l<u.length;l++){var _=u[l];r(e,_)||n&&r(n,_)||s(e,_,p(t,_))}}},8880:function(e,t,n){var r=n(9781),a=n(3070),o=n(9114);e.exports=r?function(e,t,n){return a.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,n){"use strict";var r=n(4948),a=n(3070),o=n(9114);e.exports=function(e,t,n){var i=r(t);i in e?a.f(e,i,o(0,n)):e[i]=n}},8052:function(e,t,n){var r=n(614),a=n(3070),o=n(6339),i=n(3072);e.exports=function(e,t,n,u){u||(u={});var s=u.enumerable,p=void 0!==u.name?u.name:t;if(r(n)&&o(n,p,u),u.global)s?e[t]=n:i(t,n);else{try{u.unsafe?e[t]&&(s=!0):delete e[t]}catch(e){}s?e[t]=n:a.f(e,t,{value:n,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return e}},3072:function(e,t,n){var r=n(7854),a=Object.defineProperty;e.exports=function(e,t){try{a(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},9781:function(e,t,n){var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(e,t,n){var r=n(7854),a=n(111),o=r.document,i=a(o)&&a(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},7871:function(e,t,n){var r=n(3823),a=n(5268);e.exports=!r&&!a&&"object"==typeof window&&"object"==typeof document},3823:function(e){e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},1528:function(e,t,n){var r=n(8113),a=n(7854);e.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==a.Pebble},6833:function(e,t,n){var r=n(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},5268:function(e,t,n){var r=n(4326),a=n(7854);e.exports="process"==r(a.process)},1036:function(e,t,n){var r=n(8113);e.exports=/web0s(?!.*chrome)/i.test(r)},8113:function(e,t,n){var r=n(5005);e.exports=r("navigator","userAgent")||""},7392:function(e,t,n){var r,a,o=n(7854),i=n(8113),u=o.process,s=o.Deno,p=u&&u.versions||s&&s.version,l=p&&p.v8;l&&(a=(r=l.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(a=+r[1]),e.exports=a},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,n){var r=n(7854),a=n(1236).f,o=n(8880),i=n(8052),u=n(3072),s=n(9920),p=n(4705);e.exports=function(e,t){var n,l,_,d,T,m=e.target,c=e.global,f=e.stat;if(n=c?r:f?r[m]||u(m,{}):(r[m]||{}).prototype)for(l in t){if(d=t[l],_=e.dontCallGetSet?(T=a(n,l))&&T.value:n[l],!p(c?l:m+(f?".":"#")+l,e.forced)&&void 0!==_){if(typeof d==typeof _)continue;s(d,_)}(e.sham||_&&_.sham)&&o(d,"sham",!0),i(n,l,d,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},2104:function(e,t,n){var r=n(4374),a=Function.prototype,o=a.apply,i=a.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(o):function(){return i.apply(o,arguments)})},9974:function(e,t,n){var r=n(1702),a=n(9662),o=n(4374),i=r(r.bind);e.exports=function(e,t){return a(e),void 0===t?e:o?i(e,t):function(){return e.apply(t,arguments)}}},4374:function(e,t,n){var r=n(7293);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},6916:function(e,t,n){var r=n(4374),a=Function.prototype.call;e.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},6530:function(e,t,n){var r=n(9781),a=n(2597),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,u=a(o,"name"),s=u&&"something"===function(){}.name,p=u&&(!r||r&&i(o,"name").configurable);e.exports={EXISTS:u,PROPER:s,CONFIGURABLE:p}},1702:function(e,t,n){var r=n(4374),a=Function.prototype,o=a.bind,i=a.call,u=r&&o.bind(i,i);e.exports=r?function(e){return e&&u(e)}:function(e){return e&&function(){return i.apply(e,arguments)}}},5005:function(e,t,n){var r=n(7854),a=n(614),o=function(e){return a(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e]):r[e]&&r[e][t]}},1246:function(e,t,n){var r=n(648),a=n(8173),o=n(7497),i=n(5112)("iterator");e.exports=function(e){if(null!=e)return a(e,i)||a(e,"@@iterator")||o[r(e)]}},8554:function(e,t,n){var r=n(6916),a=n(9662),o=n(9670),i=n(6330),u=n(1246),s=TypeError;e.exports=function(e,t){var n=arguments.length<2?u(e):t;if(a(n))return o(r(n,e));throw s(i(e)+" is not iterable")}},8173:function(e,t,n){var r=n(9662);e.exports=function(e,t){var n=e[t];return null==n?void 0:r(n)}},7854:function(e,t,n){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},2597:function(e,t,n){var r=n(1702),a=n(7908),o=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return o(a(e),t)}},3501:function(e){e.exports={}},842:function(e,t,n){var r=n(7854);e.exports=function(e,t){var n=r.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}},490:function(e,t,n){var r=n(5005);e.exports=r("document","documentElement")},4664:function(e,t,n){var r=n(9781),a=n(7293),o=n(317);e.exports=!r&&!a((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},8361:function(e,t,n){var r=n(1702),a=n(7293),o=n(4326),i=Object,u=r("".split);e.exports=a((function(){return!i("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?u(e,""):i(e)}:i},2788:function(e,t,n){var r=n(1702),a=n(614),o=n(5465),i=r(Function.toString);a(o.inspectSource)||(o.inspectSource=function(e){return i(e)}),e.exports=o.inspectSource},9909:function(e,t,n){var r,a,o,i=n(8536),u=n(7854),s=n(1702),p=n(111),l=n(8880),_=n(2597),d=n(5465),T=n(6200),m=n(3501),c="Object already initialized",f=u.TypeError,g=u.WeakMap;if(i||d.state){var E=d.state||(d.state=new g),y=s(E.get),h=s(E.has),N=s(E.set);r=function(e,t){if(h(E,e))throw new f(c);return t.facade=e,N(E,e,t),t},a=function(e){return y(E,e)||{}},o=function(e){return h(E,e)}}else{var v=T("state");m[v]=!0,r=function(e,t){if(_(e,v))throw new f(c);return t.facade=e,l(e,v,t),t},a=function(e){return _(e,v)?e[v]:{}},o=function(e){return _(e,v)}}e.exports={set:r,get:a,has:o,enforce:function(e){return o(e)?a(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!p(t)||(n=a(t)).type!==e)throw f("Incompatible receiver, "+e+" required");return n}}}},7659:function(e,t,n){var r=n(5112),a=n(7497),o=r("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||i[o]===e)}},614:function(e){e.exports=function(e){return"function"==typeof e}},4411:function(e,t,n){var r=n(1702),a=n(7293),o=n(614),i=n(648),u=n(5005),s=n(2788),p=function(){},l=[],_=u("Reflect","construct"),d=/^\s*(?:class|function)\b/,T=r(d.exec),m=!d.exec(p),c=function(e){if(!o(e))return!1;try{return _(p,l,e),!0}catch(e){return!1}},f=function(e){if(!o(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!T(d,s(e))}catch(e){return!0}};f.sham=!0,e.exports=!_||a((function(){var e;return c(c.call)||!c(Object)||!c((function(){e=!0}))||e}))?f:c},4705:function(e,t,n){var r=n(7293),a=n(614),o=/#|\.prototype\./,i=function(e,t){var n=s[u(e)];return n==l||n!=p&&(a(t)?r(t):!!t)},u=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},s=i.data={},p=i.NATIVE="N",l=i.POLYFILL="P";e.exports=i},111:function(e,t,n){var r=n(614);e.exports=function(e){return"object"==typeof e?null!==e:r(e)}},1913:function(e){e.exports=!1},2190:function(e,t,n){var r=n(5005),a=n(614),o=n(7976),i=n(3307),u=Object;e.exports=i?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return a(t)&&o(t.prototype,u(e))}},408:function(e,t,n){var r=n(9974),a=n(6916),o=n(9670),i=n(6330),u=n(7659),s=n(6244),p=n(7976),l=n(8554),_=n(1246),d=n(9212),T=TypeError,m=function(e,t){this.stopped=e,this.result=t},c=m.prototype;e.exports=function(e,t,n){var f,g,E,y,h,N,v,x=n&&n.that,O=!(!n||!n.AS_ENTRIES),C=!(!n||!n.IS_RECORD),I=!(!n||!n.IS_ITERATOR),b=!(!n||!n.INTERRUPTED),w=r(t,x),A=function(e){return f&&d(f,"normal",e),new m(!0,e)},S=function(e){return O?(o(e),b?w(e[0],e[1],A):w(e[0],e[1])):b?w(e,A):w(e)};if(C)f=e.iterator;else if(I)f=e;else{if(!(g=_(e)))throw T(i(e)+" is not iterable");if(u(g)){for(E=0,y=s(e);y>E;E++)if((h=S(e[E]))&&p(c,h))return h;return new m(!1)}f=l(e,g)}for(N=C?e.next:f.next;!(v=a(N,f)).done;){try{h=S(v.value)}catch(e){d(f,"throw",e)}if("object"==typeof h&&h&&p(c,h))return h}return new m(!1)}},9212:function(e,t,n){var r=n(6916),a=n(9670),o=n(8173);e.exports=function(e,t,n){var i,u;a(e);try{if(!(i=o(e,"return"))){if("throw"===t)throw n;return n}i=r(i,e)}catch(e){u=!0,i=e}if("throw"===t)throw n;if(u)throw i;return a(i),n}},7497:function(e){e.exports={}},6244:function(e,t,n){var r=n(7466);e.exports=function(e){return r(e.length)}},6339:function(e,t,n){var r=n(7293),a=n(614),o=n(2597),i=n(9781),u=n(6530).CONFIGURABLE,s=n(2788),p=n(9909),l=p.enforce,_=p.get,d=Object.defineProperty,T=i&&!r((function(){return 8!==d((function(){}),"length",{value:8}).length})),m=String(String).split("String"),c=e.exports=function(e,t,n){"Symbol("===String(t).slice(0,7)&&(t="["+String(t).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!o(e,"name")||u&&e.name!==t)&&(i?d(e,"name",{value:t,configurable:!0}):e.name=t),T&&n&&o(n,"arity")&&e.length!==n.arity&&d(e,"length",{value:n.arity});try{n&&o(n,"constructor")&&n.constructor?i&&d(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=l(e);return o(r,"source")||(r.source=m.join("string"==typeof t?t:"")),e};Function.prototype.toString=c((function(){return a(this)&&_(this).source||s(this)}),"toString")},4758:function(e){var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},5948:function(e,t,n){var r,a,o,i,u,s,p,l,_=n(7854),d=n(9974),T=n(1236).f,m=n(261).set,c=n(6833),f=n(1528),g=n(1036),E=n(5268),y=_.MutationObserver||_.WebKitMutationObserver,h=_.document,N=_.process,v=_.Promise,x=T(_,"queueMicrotask"),O=x&&x.value;O||(r=function(){var e,t;for(E&&(e=N.domain)&&e.exit();a;){t=a.fn,a=a.next;try{t()}catch(e){throw a?i():o=void 0,e}}o=void 0,e&&e.enter()},c||E||g||!y||!h?!f&&v&&v.resolve?((p=v.resolve(void 0)).constructor=v,l=d(p.then,p),i=function(){l(r)}):E?i=function(){N.nextTick(r)}:(m=d(m,_),i=function(){m(r)}):(u=!0,s=h.createTextNode(""),new y(r).observe(s,{characterData:!0}),i=function(){s.data=u=!u})),e.exports=O||function(e){var t={fn:e,next:void 0};o&&(o.next=t),a||(a=t,i()),o=t}},133:function(e,t,n){var r=n(7392),a=n(7293);e.exports=!!Object.getOwnPropertySymbols&&!a((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},8536:function(e,t,n){var r=n(7854),a=n(614),o=n(2788),i=r.WeakMap;e.exports=a(i)&&/native code/.test(o(i))},8523:function(e,t,n){"use strict";var r=n(9662),a=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new a(e)}},1574:function(e,t,n){"use strict";var r=n(9781),a=n(1702),o=n(6916),i=n(7293),u=n(1956),s=n(5181),p=n(5296),l=n(7908),_=n(8361),d=Object.assign,T=Object.defineProperty,m=a([].concat);e.exports=!d||i((function(){if(r&&1!==d({b:1},d(T({},"a",{enumerable:!0,get:function(){T(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),a="abcdefghijklmnopqrst";return e[n]=7,a.split("").forEach((function(e){t[e]=e})),7!=d({},e)[n]||u(d({},t)).join("")!=a}))?function(e,t){for(var n=l(e),a=arguments.length,i=1,d=s.f,T=p.f;a>i;)for(var c,f=_(arguments[i++]),g=d?m(u(f),d(f)):u(f),E=g.length,y=0;E>y;)c=g[y++],r&&!o(T,f,c)||(n[c]=f[c]);return n}:d},3070:function(e,t,n){var r=n(9781),a=n(4664),o=n(3353),i=n(9670),u=n(4948),s=TypeError,p=Object.defineProperty,l=Object.getOwnPropertyDescriptor;t.f=r?o?function(e,t,n){if(i(e),t=u(t),i(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var r=l(e,t);r&&r.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:r.configurable,enumerable:"enumerable"in n?n.enumerable:r.enumerable,writable:!1})}return p(e,t,n)}:p:function(e,t,n){if(i(e),t=u(t),i(n),a)try{return p(e,t,n)}catch(e){}if("get"in n||"set"in n)throw s("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},1236:function(e,t,n){var r=n(9781),a=n(6916),o=n(5296),i=n(9114),u=n(5656),s=n(4948),p=n(2597),l=n(4664),_=Object.getOwnPropertyDescriptor;t.f=r?_:function(e,t){if(e=u(e),t=s(t),l)try{return _(e,t)}catch(e){}if(p(e,t))return i(!a(o.f,e,t),e[t])}},8006:function(e,t,n){var r=n(6324),a=n(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,a)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},7976:function(e,t,n){var r=n(1702);e.exports=r({}.isPrototypeOf)},6324:function(e,t,n){var r=n(1702),a=n(2597),o=n(5656),i=n(1318).indexOf,u=n(3501),s=r([].push);e.exports=function(e,t){var n,r=o(e),p=0,l=[];for(n in r)!a(u,n)&&a(r,n)&&s(l,n);for(;t.length>p;)a(r,n=t[p++])&&(~i(l,n)||s(l,n));return l}},1956:function(e,t,n){var r=n(6324),a=n(748);e.exports=Object.keys||function(e){return r(e,a)}},5296:function(e,t){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,a=r&&!n.call({1:2},1);t.f=a?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},7674:function(e,t,n){var r=n(1702),a=n(9670),o=n(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return a(n),o(r),t?e(n,r):n.__proto__=r,n}}():void 0)},4699:function(e,t,n){var r=n(9781),a=n(1702),o=n(1956),i=n(5656),u=a(n(5296).f),s=a([].push),p=function(e){return function(t){for(var n,a=i(t),p=o(a),l=p.length,_=0,d=[];l>_;)n=p[_++],r&&!u(a,n)||s(d,e?[n,a[n]]:a[n]);return d}};e.exports={entries:p(!0),values:p(!1)}},2140:function(e,t,n){var r=n(6916),a=n(614),o=n(111),i=TypeError;e.exports=function(e,t){var n,u;if("string"===t&&a(n=e.toString)&&!o(u=r(n,e)))return u;if(a(n=e.valueOf)&&!o(u=r(n,e)))return u;if("string"!==t&&a(n=e.toString)&&!o(u=r(n,e)))return u;throw i("Can't convert object to primitive value")}},3887:function(e,t,n){var r=n(5005),a=n(1702),o=n(8006),i=n(5181),u=n(9670),s=a([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(u(e)),n=i.f;return n?s(t,n(e)):t}},2534:function(e){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},3702:function(e,t,n){var r=n(7854),a=n(2492),o=n(614),i=n(4705),u=n(2788),s=n(5112),p=n(7871),l=n(3823),_=n(1913),d=n(7392),T=a&&a.prototype,m=s("species"),c=!1,f=o(r.PromiseRejectionEvent),g=i("Promise",(function(){var e=u(a),t=e!==String(a);if(!t&&66===d)return!0;if(_&&(!T.catch||!T.finally))return!0;if(!d||d<51||!/native code/.test(e)){var n=new a((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[m]=r,!(c=n.then((function(){}))instanceof r))return!0}return!t&&(p||l)&&!f}));e.exports={CONSTRUCTOR:g,REJECTION_EVENT:f,SUBCLASSING:c}},2492:function(e,t,n){var r=n(7854);e.exports=r.Promise},9478:function(e,t,n){var r=n(9670),a=n(111),o=n(8523);e.exports=function(e,t){if(r(e),a(t)&&t.constructor===e)return t;var n=o.f(e);return(0,n.resolve)(t),n.promise}},612:function(e,t,n){var r=n(2492),a=n(7072),o=n(3702).CONSTRUCTOR;e.exports=o||!a((function(e){r.all(e).then(void 0,(function(){}))}))},8572:function(e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null};this.head?this.tail.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},e.exports=t},4488:function(e){var t=TypeError;e.exports=function(e){if(null==e)throw t("Can't call method on "+e);return e}},6340:function(e,t,n){"use strict";var r=n(5005),a=n(3070),o=n(5112),i=n(9781),u=o("species");e.exports=function(e){var t=r(e),n=a.f;i&&t&&!t[u]&&n(t,u,{configurable:!0,get:function(){return this}})}},8003:function(e,t,n){var r=n(3070).f,a=n(2597),o=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!a(e,o)&&r(e,o,{configurable:!0,value:t})}},6200:function(e,t,n){var r=n(2309),a=n(9711),o=r("keys");e.exports=function(e){return o[e]||(o[e]=a(e))}},5465:function(e,t,n){var r=n(7854),a=n(3072),o="__core-js_shared__",i=r[o]||a(o,{});e.exports=i},2309:function(e,t,n){var r=n(1913),a=n(5465);(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.24.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE",source:"https://github.com/zloirock/core-js"})},6707:function(e,t,n){var r=n(9670),a=n(9483),o=n(5112)("species");e.exports=function(e,t){var n,i=r(e).constructor;return void 0===i||null==(n=r(i)[o])?t:a(n)}},261:function(e,t,n){var r,a,o,i,u=n(7854),s=n(2104),p=n(9974),l=n(614),_=n(2597),d=n(7293),T=n(490),m=n(206),c=n(317),f=n(8053),g=n(6833),E=n(5268),y=u.setImmediate,h=u.clearImmediate,N=u.process,v=u.Dispatch,x=u.Function,O=u.MessageChannel,C=u.String,I=0,b={};try{r=u.location}catch(e){}var w=function(e){if(_(b,e)){var t=b[e];delete b[e],t()}},A=function(e){return function(){w(e)}},S=function(e){w(e.data)},M=function(e){u.postMessage(C(e),r.protocol+"//"+r.host)};y&&h||(y=function(e){f(arguments.length,1);var t=l(e)?e:x(e),n=m(arguments,1);return b[++I]=function(){s(t,void 0,n)},a(I),I},h=function(e){delete b[e]},E?a=function(e){N.nextTick(A(e))}:v&&v.now?a=function(e){v.now(A(e))}:O&&!g?(i=(o=new O).port2,o.port1.onmessage=S,a=p(i.postMessage,i)):u.addEventListener&&l(u.postMessage)&&!u.importScripts&&r&&"file:"!==r.protocol&&!d(M)?(a=M,u.addEventListener("message",S,!1)):a="onreadystatechange"in c("script")?function(e){T.appendChild(c("script")).onreadystatechange=function(){T.removeChild(this),w(e)}}:function(e){setTimeout(A(e),0)}),e.exports={set:y,clear:h}},1400:function(e,t,n){var r=n(9303),a=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?a(n+t,0):o(n,t)}},5656:function(e,t,n){var r=n(8361),a=n(4488);e.exports=function(e){return r(a(e))}},9303:function(e,t,n){var r=n(4758);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},7466:function(e,t,n){var r=n(9303),a=Math.min;e.exports=function(e){return e>0?a(r(e),9007199254740991):0}},7908:function(e,t,n){var r=n(4488),a=Object;e.exports=function(e){return a(r(e))}},7593:function(e,t,n){var r=n(6916),a=n(111),o=n(2190),i=n(8173),u=n(2140),s=n(5112),p=TypeError,l=s("toPrimitive");e.exports=function(e,t){if(!a(e)||o(e))return e;var n,s=i(e,l);if(s){if(void 0===t&&(t="default"),n=r(s,e,t),!a(n)||o(n))return n;throw p("Can't convert object to primitive value")}return void 0===t&&(t="number"),u(e,t)}},4948:function(e,t,n){var r=n(7593),a=n(2190);e.exports=function(e){var t=r(e,"string");return a(t)?t:t+""}},1694:function(e,t,n){var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},6330:function(e){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9711:function(e,t,n){var r=n(1702),a=0,o=Math.random(),i=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++a+o,36)}},3307:function(e,t,n){var r=n(133);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:function(e,t,n){var r=n(9781),a=n(7293);e.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8053:function(e){var t=TypeError;e.exports=function(e,n){if(e<n)throw t("Not enough arguments");return e}},5112:function(e,t,n){var r=n(7854),a=n(2309),o=n(2597),i=n(9711),u=n(133),s=n(3307),p=a("wks"),l=r.Symbol,_=l&&l.for,d=s?l:l&&l.withoutSetter||i;e.exports=function(e){if(!o(p,e)||!u&&"string"!=typeof p[e]){var t="Symbol."+e;u&&o(l,e)?p[e]=l[e]:p[e]=s&&_?_(t):d(t)}return p[e]}},9601:function(e,t,n){var r=n(2109),a=n(1574);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==a},{assign:a})},9720:function(e,t,n){var r=n(2109),a=n(4699).entries;r({target:"Object",stat:!0},{entries:function(e){return a(e)}})},8559:function(e,t,n){var r=n(2109),a=n(408),o=n(6135);r({target:"Object",stat:!0},{fromEntries:function(e){var t={};return a(e,(function(e,n){o(t,e,n)}),{AS_ENTRIES:!0}),t}})},821:function(e,t,n){"use strict";var r=n(2109),a=n(6916),o=n(9662),i=n(8523),u=n(2534),s=n(408);r({target:"Promise",stat:!0,forced:n(612)},{all:function(e){var t=this,n=i.f(t),r=n.resolve,p=n.reject,l=u((function(){var n=o(t.resolve),i=[],u=0,l=1;s(e,(function(e){var o=u++,s=!1;l++,a(n,t,e).then((function(e){s||(s=!0,i[o]=e,--l||r(i))}),p)})),--l||r(i)}));return l.error&&p(l.value),n.promise}})},4164:function(e,t,n){"use strict";var r=n(2109),a=n(1913),o=n(3702).CONSTRUCTOR,i=n(2492),u=n(5005),s=n(614),p=n(8052),l=i&&i.prototype;if(r({target:"Promise",proto:!0,forced:o,real:!0},{catch:function(e){return this.then(void 0,e)}}),!a&&s(i)){var _=u("Promise").prototype.catch;l.catch!==_&&p(l,"catch",_,{unsafe:!0})}},3401:function(e,t,n){"use strict";var r,a,o,i=n(2109),u=n(1913),s=n(5268),p=n(7854),l=n(6916),_=n(8052),d=n(7674),T=n(8003),m=n(6340),c=n(9662),f=n(614),g=n(111),E=n(5787),y=n(6707),h=n(261).set,N=n(5948),v=n(842),x=n(2534),O=n(8572),C=n(9909),I=n(2492),b=n(3702),w=n(8523),A="Promise",S=b.CONSTRUCTOR,M=b.REJECTION_EVENT,P=b.SUBCLASSING,D=C.getterFor(A),X=C.set,R=I&&I.prototype,G=I,k=R,L=p.TypeError,U=p.document,j=p.process,F=w.f,Y=F,q=!!(U&&U.createEvent&&p.dispatchEvent),B="unhandledrejection",z=function(e){var t;return!(!g(e)||!f(t=e.then))&&t},H=function(e,t){var n,r,a,o=t.value,i=1==t.state,u=i?e.ok:e.fail,s=e.resolve,p=e.reject,_=e.domain;try{u?(i||(2===t.rejection&&Q(t),t.rejection=1),!0===u?n=o:(_&&_.enter(),n=u(o),_&&(_.exit(),a=!0)),n===e.promise?p(L("Promise-chain cycle")):(r=z(n))?l(r,n,s,p):s(n)):p(o)}catch(e){_&&!a&&_.exit(),p(e)}},V=function(e,t){e.notified||(e.notified=!0,N((function(){for(var n,r=e.reactions;n=r.get();)H(n,e);e.notified=!1,t&&!e.rejection&&W(e)})))},K=function(e,t,n){var r,a;q?((r=U.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),p.dispatchEvent(r)):r={promise:t,reason:n},!M&&(a=p["on"+e])?a(r):e===B&&v("Unhandled promise rejection",n)},W=function(e){l(h,p,(function(){var t,n=e.facade,r=e.value;if(Z(e)&&(t=x((function(){s?j.emit("unhandledRejection",r,n):K(B,n,r)})),e.rejection=s||Z(e)?2:1,t.error))throw t.value}))},Z=function(e){return 1!==e.rejection&&!e.parent},Q=function(e){l(h,p,(function(){var t=e.facade;s?j.emit("rejectionHandled",t):K("rejectionhandled",t,e.value)}))},J=function(e,t,n){return function(r){e(t,r,n)}},$=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,V(e,!0))},ee=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw L("Promise can't be resolved itself");var r=z(t);r?N((function(){var n={done:!1};try{l(r,t,J(ee,n,e),J($,n,e))}catch(t){$(n,t,e)}})):(e.value=t,e.state=1,V(e,!1))}catch(t){$({done:!1},t,e)}}};if(S&&(k=(G=function(e){E(this,k),c(e),l(r,this);var t=D(this);try{e(J(ee,t),J($,t))}catch(e){$(t,e)}}).prototype,(r=function(e){X(this,{type:A,done:!1,notified:!1,parent:!1,reactions:new O,rejection:!1,state:0,value:void 0})}).prototype=_(k,"then",(function(e,t){var n=D(this),r=F(y(this,G));return n.parent=!0,r.ok=!f(e)||e,r.fail=f(t)&&t,r.domain=s?j.domain:void 0,0==n.state?n.reactions.add(r):N((function(){H(r,n)})),r.promise})),a=function(){var e=new r,t=D(e);this.promise=e,this.resolve=J(ee,t),this.reject=J($,t)},w.f=F=function(e){return e===G||void 0===e?new a(e):Y(e)},!u&&f(I)&&R!==Object.prototype)){o=R.then,P||_(R,"then",(function(e,t){var n=this;return new G((function(e,t){l(o,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete R.constructor}catch(e){}d&&d(R,k)}i({global:!0,constructor:!0,wrap:!0,forced:S},{Promise:G}),T(G,A,!1,!0),m(A)},8674:function(e,t,n){n(3401),n(821),n(4164),n(6027),n(683),n(6294)},6027:function(e,t,n){"use strict";var r=n(2109),a=n(6916),o=n(9662),i=n(8523),u=n(2534),s=n(408);r({target:"Promise",stat:!0,forced:n(612)},{race:function(e){var t=this,n=i.f(t),r=n.reject,p=u((function(){var i=o(t.resolve);s(e,(function(e){a(i,t,e).then(n.resolve,r)}))}));return p.error&&r(p.value),n.promise}})},683:function(e,t,n){"use strict";var r=n(2109),a=n(6916),o=n(8523);r({target:"Promise",stat:!0,forced:n(3702).CONSTRUCTOR},{reject:function(e){var t=o.f(this);return a(t.reject,void 0,e),t.promise}})},6294:function(e,t,n){"use strict";var r=n(2109),a=n(5005),o=n(1913),i=n(2492),u=n(3702).CONSTRUCTOR,s=n(9478),p=a("Promise"),l=o&&!u;r({target:"Promise",stat:!0,forced:o||u},{resolve:function(e){return s(l&&this===p?i:this,e)}})},1763:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Trainables=void 0;var r=n(8913),a=function(){function e(e){this.autoMLInst=new r.AutoMLTrainable(e)}return e.prototype.automl=function(){return this.autoMLInst},e}();t.Trainables=a},8913:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AutoMLTrainable=void 0;var r=n(655),a=n(9699),o=n(1551),i=n(6117),u=n(2026),s=function(){function e(e){this.params=e,(0,u.isPreviewEnabled)(e)&&(this.httpClient=(0,a.getHttpClient)(this.params))}return e.prototype.train=function(e){var t;if(!(0,u.isPreviewEnabled)(this.params))throw new o.PreviewFeatureError;var n={data:e.data,label:e.label};return(0,i.isDefined)(e.eval_metric)&&(n.eval_metric=e.eval_metric),(0,i.isDefined)(e.time_limit)&&(n.time_limit=e.time_limit),this.httpClient.post({url:"/automl/train",headers:r.__assign({"Content-Type":"application/json"},null!==(t=e.headers)&&void 0!==t?t:{}),responseType:"json",body:JSON.stringify(n)})},e.prototype.predict=function(e){var t;if(!(0,u.isPreviewEnabled)(this.params))throw new o.PreviewFeatureError;var n={model_id:e.model_id,data:e.data};return this.httpClient.post({url:"/automl/predict",headers:r.__assign({"Content-Type":"application/json"},null!==(t=e.headers)&&void 0!==t?t:{}),responseType:"json",body:JSON.stringify(n)})},e}();t.AutoMLTrainable=s},3682:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudioToText=void 0;var r=n(655),a=n(8778),o=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.audioTranscription=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),n.append("language",e.language),this.httpClient.post({url:"/audio/text/audio-transcription/",headers:r.__assign({"Content-Type":this.params.useFetch?a.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.speakerDiarization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),(0,i.isDefined)(e.nb_speakers)&&n.append("nb_speakers",String(e.nb_speakers)),this.httpClient.post({url:"/audio/text/speaker-diarization/",headers:r.__assign({"Content-Type":this.params.useFetch?a.AUDIO_TEXT_SPEAKER_DIARIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.speakerGenderClassification=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),this.httpClient.post({url:"/audio/text/speaker-gender-classification/",headers:r.__assign({"Content-Type":this.params.useFetch?a.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromAudioToText=u},8490:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudio=void 0;var r=n(3682),a=function(){function e(e){this.fromAudioToTextInst=new r.FromAudioToText(e)}return e.prototype.toText=function(){return this.fromAudioToTextInst},e}();t.FromAudio=a},8814:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToImage=void 0;var r=n(655),a=n(8778),o=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.backgroundRemoval=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/background-removal/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.backgroundReplacement=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.background_image)&&n.append("background_image",e.background_image),(0,i.isDefined)(e.background_image_url)&&n.append("background_image_url",e.background_image_url),n.append("alignment",e.alignment),this.httpClient.post({url:"/image/image/background-replacement/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.colorization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/colorization/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.deblurring=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/deblurring/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.enhancement=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/enhancement/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_ENHANCEMENT_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.faceBluring=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/face-bluring/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.guidedInpainting=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,i.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),n.append("prompt",e.prompt),this.httpClient.post({url:"/image/image/guided-inpainting/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.imageGuidedInpainting=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.example_image)&&n.append("example_image",e.example_image),(0,i.isDefined)(e.example_image_url)&&n.append("example_image_url",e.example_image_url),(0,i.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,i.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),n.append("seed",String(e.seed)),n.append("steps",String(e.steps)),n.append("guidance_scale",String(e.guidance_scale)),this.httpClient.post({url:"/image/image/image-guided-inpainting/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.inpainting=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,i.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),this.httpClient.post({url:"/image/image/inpainting/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e.prototype.uncolorization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/uncolorization/",headers:r.__assign(r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE:void 0},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.asUrl?"json":"arraybuffer",body:n})},e}();t.FromImageToImage=u},4802:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToText=void 0;var r=n(655),a=n(8778),o=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.classification=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/image/text/classification/",headers:r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.ocr=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),n.append("source_language",e.source_language),this.httpClient.post({url:"/image/text/ocr/",headers:r.__assign({"Content-Type":this.params.useFetch?a.IMAGE_TEXT_OCR_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromImageToText=u},2062:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImage=void 0;var r=n(8814),a=n(4802),o=function(){function e(e){this.fromImageToImageInst=new r.FromImageToImage(e),this.fromImageToTextInst=new a.FromImageToText(e)}return e.prototype.toImage=function(){return this.fromImageToImageInst},e.prototype.toText=function(){return this.fromImageToTextInst},e}();t.FromImage=o},4153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToImage=void 0;var r=n(655),a=n(8778),o=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.imageGeneration=function(e){var t,n=new o.UrlFormData;return n.append("prompt",e.prompt),(0,i.isDefined)(e.samples)&&n.append("samples",String(e.samples)),(0,i.isDefined)(e.steps)&&n.append("steps",String(e.steps)),(0,i.isDefined)(e.seed)&&n.append("seed",String(e.seed)),this.httpClient.post({url:"/text/image/image-generation/",headers:r.__assign(r.__assign({"Content-Type":a.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE},e.asUrl?{Accept:"text/uri-list"}:{}),null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.samples>1||e.asUrl?"json":"arraybuffer",body:n.toString()})},e}();t.FromTextToImage=u},8271:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToText=void 0;var r=n(655),a=n(8778),o=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.addressFormatting=function(e){var t,n=new o.UrlFormData;return n.append("address",e.address),this.httpClient.post({url:"/text/text/address-formatting/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_ADDRESS_FORMATTING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.ageFromName=function(e){var t,n=new o.UrlFormData;return n.append("name",e.name),this.httpClient.post({url:"/text/text/age-from-name/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_AGE_FROM_NAME_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.anonymization=function(e){var t,n=new o.UrlFormData;return n.append("language",e.language),n.append("entities",e.entities),n.append("text",e.text),this.httpClient.post({url:"/text/text/anonymization/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_ANONYMIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.autocorrect=function(e){var t,n=new o.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/autocorrect/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.bulletPointGeneration=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),(0,i.isDefined)(e.bullets)&&n.append("bullets",String(e.bullets)),this.httpClient.post({url:"/text/text/bullet-point-generation/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.commandGeneration=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/command-generation/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_COMMAND_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.companyCategorization=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/company-categorization/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_COMPANY_CATEGORIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.companyNameNormalization=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/company-name-normalization/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.companyStockCode=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/company-stock-code/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_COMPANY_STOCK_CODE_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.conversationSummarization=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/conversation-summarization/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_CONVERSATION_SUMMARIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.countryFromName=function(e){var t,n=new o.UrlFormData;return n.append("name",e.name),this.httpClient.post({url:"/text/text/country-from-name/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_COUNTRY_FROM_NAME_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.dateCleaning=function(e){var t,n=new o.UrlFormData;return n.append("date",e.date),this.httpClient.post({url:"/text/text/date-cleaning/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_DATE_CLEANING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.emotionRecognition=function(e){var t,n=new o.UrlFormData;return n.append("texts",e.texts),this.httpClient.post({url:"/text/text/emotion-recognition/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.genderFromName=function(e){var t,n=new o.UrlFormData;return n.append("name",e.name),this.httpClient.post({url:"/text/text/gender-from-name/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_GENDER_FROM_NAME_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.gpsAddressFormatting=function(e){var t,n=new o.UrlFormData;return n.append("latitude",String(e.latitude)),n.append("longitude",String(e.longitude)),this.httpClient.post({url:"/text/text/gps-address-formatting/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_GPS_ADDRESS_FORMATTING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.gpt3=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/gpt3/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_GPT3_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.guessCity=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/guess-city/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_GUESS_CITY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.guessCountry=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/guess-country/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_GUESS_COUNTRY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.guessIntent=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/guess-intent/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_GUESS_INTENT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.hateSpeechDetection=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/hate-speech-detection/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.headlineGeneration=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),n.append("max_length",String(e.max_length)),this.httpClient.post({url:"/text/text/headline-generation/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.imageGenerationPromptBeautifier=function(e){var t,n=new o.UrlFormData;return n.append("prompt",e.prompt),this.httpClient.post({url:"/text/text/image-generation-prompt-beautifier/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_IMAGE_GENERATION_PROMPT_BEAUTIFIER_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.keywordExtraction=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),(0,i.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/keyword-extraction/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageCodes=function(e){var t,n=new o.UrlFormData;return n.append("language_code",e.language_code),n.append("display_output_language",e.display_output_language),this.httpClient.post({url:"/text/text/language-codes/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_LANGUAGE_CODES_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageDetection=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-detection/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageGeneration=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-generation/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.namedEntityRecognition=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/named-entity-recognition/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextSentencePrediction=function(e){var t,n=new o.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/next-sentence-prediction/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextWordPrediction=function(e){var t,n=new o.UrlFormData;return n.append("sentence",e.sentence),n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/next-word-prediction/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.productOwnership=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/product-ownership/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_PRODUCT_OWNERSHIP_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.productSentiment=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/product-sentiment/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_PRODUCT_SENTIMENT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.programmingLanguageGeneration=function(e){var t,n=new o.UrlFormData;return n.append("code_snippet",e.code_snippet),this.httpClient.post({url:"/text/text/programming-language-generation/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.punctuationRestoration=function(e){var t,n=new o.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/punctuation-restoration/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_PUNCTUATION_RESTORATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.questionAnswering=function(e){var t,n=new o.UrlFormData;return n.append("context",e.context),n.append("question",e.question),(0,i.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/question-answering/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentenceParaphraser=function(e){var t,n=new o.UrlFormData;return n.append("context",e.context),this.httpClient.post({url:"/text/text/sentence-paraphraser/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentimentAnalysis=function(e){var t,n=new o.UrlFormData;return n.append("texts",e.texts),this.httpClient.post({url:"/text/text/sentiment-analysis/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.similarity=function(e){var t,n=new o.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/similarity/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_SIMILARITY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.speakerRecognition=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/speaker-recognition/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_SPEAKER_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.summarization=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),n.append("source_language",e.source_language),(0,i.isDefined)(e.min_length)&&n.append("min_length",String(e.min_length)),(0,i.isDefined)(e.max_length)&&n.append("max_length",String(e.max_length)),this.httpClient.post({url:"/text/text/summarization/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.translation=function(e){var t,n=new o.UrlFormData;return n.append("input_string",e.input_string),n.append("source_language",e.source_language),n.append("target_language",e.target_language),this.httpClient.post({url:"/text/text/translation/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_TRANSLATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.vatCountryGuessing=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/vat-country-guessing/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_VAT_COUNTRY_GUESSING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.websiteClassification=function(e){var t,n=new o.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/website-classification/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_WEBSITE_CLASSIFICATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.wordAlignment=function(e){var t,n=new o.UrlFormData;return n.append("input_string_language_1",e.input_string_language_1),n.append("input_string_language_2",e.input_string_language_2),this.httpClient.post({url:"/text/text/word-alignment/",headers:r.__assign({"Content-Type":a.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e}();t.FromTextToText=u},9438:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromText=void 0;var r=n(4153),a=n(8271),o=function(){function e(e){this.fromTextToImageInst=new r.FromTextToImage(e),this.fromTextToTextInst=new a.FromTextToText(e)}return e.prototype.toImage=function(){return this.fromTextToImageInst},e.prototype.toText=function(){return this.fromTextToTextInst},e}();t.FromText=o},1097:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromVideoToText=void 0;var r=n(655),a=n(8778),o=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.actionClassifications=function(e){var t,n=new FormData;return(0,i.isDefined)(e.video)&&n.append("video",e.video),(0,i.isDefined)(e.video_url)&&n.append("video_url",e.video_url),this.httpClient.post({url:"/video/text/action-classifications/",headers:r.__assign({"Content-Type":this.params.useFetch?a.VIDEO_TEXT_ACTION_CLASSIFICATIONS_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromVideoToText=u},2349:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromVideo=void 0;var r=n(1097),a=function(){function e(e){this.fromVideoToTextInst=new r.FromVideoToText(e)}return e.prototype.toText=function(){return this.fromVideoToTextInst},e}();t.FromVideo=a},3395:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClientBase=void 0;var r=n(1763),a=function(){function e(e){this.trainableInst=new r.Trainables(e)}return e.prototype.trainable=function(){return this.trainableInst},e}();t.GladiaClientBase=a},2026:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPreviewEnabled=void 0,t.isPreviewEnabled=function(e){return e.enablePreviewFeatures}},4085:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shortcuts=void 0;var n=function(){function e(){}return e.prototype.audioTranscription=function(e){return this.fromAudio().toText().audioTranscription(e)},e.prototype.speakerDiarization=function(e){return this.fromAudio().toText().speakerDiarization(e)},e.prototype.speakerGenderClassification=function(e){return this.fromAudio().toText().speakerGenderClassification(e)},e.prototype.backgroundRemoval=function(e){return this.fromImage().toImage().backgroundRemoval(e)},e.prototype.backgroundReplacement=function(e){return this.fromImage().toImage().backgroundReplacement(e)},e.prototype.colorization=function(e){return this.fromImage().toImage().colorization(e)},e.prototype.deblurring=function(e){return this.fromImage().toImage().deblurring(e)},e.prototype.enhancement=function(e){return this.fromImage().toImage().enhancement(e)},e.prototype.faceBluring=function(e){return this.fromImage().toImage().faceBluring(e)},e.prototype.guidedInpainting=function(e){return this.fromImage().toImage().guidedInpainting(e)},e.prototype.imageGuidedInpainting=function(e){return this.fromImage().toImage().imageGuidedInpainting(e)},e.prototype.inpainting=function(e){return this.fromImage().toImage().inpainting(e)},e.prototype.uncolorization=function(e){return this.fromImage().toImage().uncolorization(e)},e.prototype.classification=function(e){return this.fromImage().toText().classification(e)},e.prototype.ocr=function(e){return this.fromImage().toText().ocr(e)},e.prototype.imageGeneration=function(e){return this.fromText().toImage().imageGeneration(e)},e.prototype.addressFormatting=function(e){return this.fromText().toText().addressFormatting(e)},e.prototype.ageFromName=function(e){return this.fromText().toText().ageFromName(e)},e.prototype.anonymization=function(e){return this.fromText().toText().anonymization(e)},e.prototype.autocorrect=function(e){return this.fromText().toText().autocorrect(e)},e.prototype.bulletPointGeneration=function(e){return this.fromText().toText().bulletPointGeneration(e)},e.prototype.commandGeneration=function(e){return this.fromText().toText().commandGeneration(e)},e.prototype.companyCategorization=function(e){return this.fromText().toText().companyCategorization(e)},e.prototype.companyNameNormalization=function(e){return this.fromText().toText().companyNameNormalization(e)},e.prototype.companyStockCode=function(e){return this.fromText().toText().companyStockCode(e)},e.prototype.conversationSummarization=function(e){return this.fromText().toText().conversationSummarization(e)},e.prototype.countryFromName=function(e){return this.fromText().toText().countryFromName(e)},e.prototype.dateCleaning=function(e){return this.fromText().toText().dateCleaning(e)},e.prototype.emotionRecognition=function(e){return this.fromText().toText().emotionRecognition(e)},e.prototype.genderFromName=function(e){return this.fromText().toText().genderFromName(e)},e.prototype.gpsAddressFormatting=function(e){return this.fromText().toText().gpsAddressFormatting(e)},e.prototype.gpt3=function(e){return this.fromText().toText().gpt3(e)},e.prototype.guessCity=function(e){return this.fromText().toText().guessCity(e)},e.prototype.guessCountry=function(e){return this.fromText().toText().guessCountry(e)},e.prototype.guessIntent=function(e){return this.fromText().toText().guessIntent(e)},e.prototype.hateSpeechDetection=function(e){return this.fromText().toText().hateSpeechDetection(e)},e.prototype.headlineGeneration=function(e){return this.fromText().toText().headlineGeneration(e)},e.prototype.imageGenerationPromptBeautifier=function(e){return this.fromText().toText().imageGenerationPromptBeautifier(e)},e.prototype.keywordExtraction=function(e){return this.fromText().toText().keywordExtraction(e)},e.prototype.languageCodes=function(e){return this.fromText().toText().languageCodes(e)},e.prototype.languageDetection=function(e){return this.fromText().toText().languageDetection(e)},e.prototype.languageGeneration=function(e){return this.fromText().toText().languageGeneration(e)},e.prototype.namedEntityRecognition=function(e){return this.fromText().toText().namedEntityRecognition(e)},e.prototype.nextSentencePrediction=function(e){return this.fromText().toText().nextSentencePrediction(e)},e.prototype.nextWordPrediction=function(e){return this.fromText().toText().nextWordPrediction(e)},e.prototype.productOwnership=function(e){return this.fromText().toText().productOwnership(e)},e.prototype.productSentiment=function(e){return this.fromText().toText().productSentiment(e)},e.prototype.programmingLanguageGeneration=function(e){return this.fromText().toText().programmingLanguageGeneration(e)},e.prototype.punctuationRestoration=function(e){return this.fromText().toText().punctuationRestoration(e)},e.prototype.questionAnswering=function(e){return this.fromText().toText().questionAnswering(e)},e.prototype.sentenceParaphraser=function(e){return this.fromText().toText().sentenceParaphraser(e)},e.prototype.sentimentAnalysis=function(e){return this.fromText().toText().sentimentAnalysis(e)},e.prototype.similarity=function(e){return this.fromText().toText().similarity(e)},e.prototype.speakerRecognition=function(e){return this.fromText().toText().speakerRecognition(e)},e.prototype.summarization=function(e){return this.fromText().toText().summarization(e)},e.prototype.translation=function(e){return this.fromText().toText().translation(e)},e.prototype.vatCountryGuessing=function(e){return this.fromText().toText().vatCountryGuessing(e)},e.prototype.websiteClassification=function(e){return this.fromText().toText().websiteClassification(e)},e.prototype.wordAlignment=function(e){return this.fromText().toText().wordAlignment(e)},e.prototype.actionClassifications=function(e){return this.fromVideo().toText().actionClassifications(e)},e}();t.Shortcuts=n},2889:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClient=void 0;var r=n(655),a=n(4085),o=n(8490),i=n(2062),u=n(9438),s=n(2349),p=n(3395),l=n(2683),_=function(e){function t(t){var n,a,p=this,l=r.__assign(r.__assign({},t),{useFetch:null!==(n=t.useFetch)&&void 0!==n&&n,useXhr:null!==(a=t.useXhr)&&void 0!==a&&a});return(p=e.call(this,l)||this).fromAudioInst=new o.FromAudio(l),p.fromImageInst=new i.FromImage(l),p.fromTextInst=new u.FromText(l),p.fromVideoInst=new s.FromVideo(l),p}return r.__extends(t,e),t.prototype.fromAudio=function(){return this.fromAudioInst},t.prototype.fromImage=function(){return this.fromImageInst},t.prototype.fromText=function(){return this.fromTextInst},t.prototype.fromVideo=function(){return this.fromVideoInst},t}(p.GladiaClientBase);t.GladiaClient=_,(0,l.applyMixins)(_,[a.Shortcuts])},3465:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.meta=t.GladiaClient=t.gladia=void 0;var r=n(655),a=n(2889);function o(e){return new a.GladiaClient(e)}t.gladia=o,t.default=o;var i=n(2889);Object.defineProperty(t,"GladiaClient",{enumerable:!0,get:function(){return i.GladiaClient}}),r.__exportStar(n(8778),t),t.meta=r.__importStar(n(2168))},2212:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserHttpClient=void 0;var r=n(312),a=n(3568);t.BrowserHttpClient=function(e){return e.useXhr?(0,a.XhrHttpClient)(e):e.useFetch||"function"==typeof fetch?(0,r.FetchHttpClient)(e):(0,a.XhrHttpClient)(e)}},312:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FetchHttpClient=void 0;var r=n(655),a=n(5327),o=n(4459);t.FetchHttpClient=function(e){var t=e.baseHeaders,n=e.baseUrl,i=e.httpClientTimeout;return{post:function(e){var u;return r.__awaiter(this,void 0,void 0,(function(){var s,p,l,_,d;return r.__generator(this,(function(T){return s=new Headers((0,a.headerSerializer)(r.__assign(r.__assign(r.__assign({},t),e.headers),{"x-gladia-sdk-http-client":"fetch"}))),p="".concat(n).concat(e.url).concat((0,o.searchQueryParamSerializer)(e.query)),l=null!==(u=e.responseType)&&void 0!==u?u:"json",c=null!=i?i:3e5,f=new AbortController,g=setTimeout((function(){return f.abort()}),c),_={signal:f.signal,cancelTimeoutController:function(){clearTimeout(g)}},d=_.cancelTimeoutController,[2,fetch(p,{method:"POST",headers:s,signal:_.signal,mode:"cors",body:(m=e.body,"string"==typeof m||m instanceof FormData?m:String(m))}).then((function(e){return d(),"json"===l?e.json():e.arrayBuffer()}))];var m,c,f,g}))}))}}}},5327:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.headerSerializer=void 0;var r=n(655),a=n(6117);t.headerSerializer=function(e){return Object.fromEntries(Object.entries(e).map((function(e){var t=r.__read(e,2),n=t[0],o=t[1];return(0,a.isNotDefined)(o)?void 0:"string"==typeof o?[n,o]:[n,String(o)]})).filter(a.isDefined))}},6245:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getHttpClientFactory=t.getHttpClient=void 0;var r=n(655),a=n(3413),o=n(2212),i=n(1070);function u(){return"undefined"==typeof window&&"object"==typeof process?i.NodeHttpClient:o.BrowserHttpClient}t.getHttpClient=function(e){var t,n,o,i,s,p;return(null!==(t=e.customHttpClient)&&void 0!==t?t:u())({baseHeaders:r.__assign({"x-gladia-key":e.apiKey,"x-gladia-sdk":a.SDK_VERSION},null!==(n=e.headers)&&void 0!==n?n:{}),baseUrl:null!==(o=e.baseUrl)&&void 0!==o?o:"https://v2-api.gladia.io",useFetch:null!==(i=e.useFetch)&&void 0!==i&&i,useXhr:null!==(s=e.useXhr)&&void 0!==s&&s,httpClientTimeout:null!==(p=e.httpClientTimeout)&&void 0!==p?p:3e5})},t.getHttpClientFactory=u},9699:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655);r.__exportStar(n(6245),t),r.__exportStar(n(8041),t)},1070:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NodeHttpClient=void 0;var r=n(655),a=n(5327),o=n(4459),i=r.__importDefault(n(5426));t.NodeHttpClient=function(e){var t=e.baseHeaders,n=e.baseUrl,u=e.httpClientTimeout;return{post:function(e){var s;return r.__awaiter(this,void 0,void 0,(function(){var p,l,_,d;return r.__generator(this,(function(T){return p=(0,a.headerSerializer)(r.__assign(r.__assign(r.__assign({},t),e.headers),{"x-gladia-sdk-http-client":"node"})),l="".concat(n).concat(e.url).concat((0,o.searchQueryParamSerializer)(e.query)),_=null!==(s=e.responseType)&&void 0!==s?s:"json",d=null!=u?u:3e5,[2,new Promise((function(t,n){var r="",a=i.default.request(l,{method:"POST",headers:p,timeout:d},(function(e){e.on("data",(function(e){r+=e})),e.on("end",(function(){var e=Buffer.from(r);if("json"!==_)return e;t(JSON.parse(e.toString()))}))}));a.on("error",(function(e){n(e)})),a.write(function(e){return"string"==typeof e||e instanceof FormData?e:String(e)}(e.body)),a.end()}))]}))}))}}}},4459:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchParamDeserializer=t.searchParamSerializer=t.searchQueryParamSerializer=void 0;var r=n(655),a=n(6117);function o(e){return Object.entries(e).map((function(e){var t,n,a=r.__read(e,2);return t=a[0],n=a[1],Array.isArray(n)?"".concat(t,"=").concat(n.map((function(e){return i(e)})).join(",")):"string"==typeof n?"".concat(t,"=").concat(i(n)):"".concat(t,"=").concat(n)})).join("&")}function i(e){return encodeURI(e).replace(/,/g,"%2C")}function u(e){return decodeURI(e).replace(/%2C/g,",")}t.searchQueryParamSerializer=function(e){if((0,a.isNotDefined)(e))return"";var t=o(e);return 0===t.length?"":"?"+t},t.searchParamSerializer=o,t.searchParamDeserializer=function(e){return(0,a.isNotDefined)(e)||0===e.length?{}:Object.fromEntries(e.split("&").map((function(e){return e.split("=")})).map((function(e){var t=r.__read(e,2),n=t[0],a=t[1];return a.includes(",")?[n,a.split(",")]:[n,a]})).map((function(e){var t=r.__read(e,2),n=t[0],a=t[1];return"string"==typeof a?[n,u(a)]:[n,a.map(u)]})))}},8041:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlFormData=void 0;var r=n(4459),a=function(){function e(e){this.data={},this.data=(0,r.searchParamDeserializer)(e)}return e.prototype.append=function(e,t){this.data[e]=t},e.prototype.get=function(e){return this.data[e]},e.prototype.toString=function(){return(0,r.searchParamSerializer)(this.data)},e}();t.UrlFormData=a},3568:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XhrHttpClient=void 0;var r=n(655),a=n(5327),o=n(4459);t.XhrHttpClient=function(e){var t=e.baseHeaders,n=e.baseUrl,i=e.httpClientTimeout;return{post:function(e){var u;return r.__awaiter(this,void 0,void 0,(function(){var s,p,l,_;return r.__generator(this,(function(d){return s=new Headers((0,a.headerSerializer)(r.__assign(r.__assign({},t),e.headers))),p="".concat(n).concat(e.url).concat((0,o.searchQueryParamSerializer)(e.query)),l=null!==(u=e.responseType)&&void 0!==u?u:"json",_=null!=i?i:3e5,[2,new Promise((function(t,n){var r,a=new XMLHttpRequest;a.onload=function(){t("json"===l?JSON.parse(a.responseText):a.response)},a.ontimeout=function(){return n("timeout")},a.onerror=function(e){return n(e)},a.timeout=_,a.open("POST",p),s.forEach((function(e,t){a.setRequestHeader(t,e)})),a.setRequestHeader("x-gladia-sdk-http-client","xhr"),a.send("string"==typeof(r=e.body)||r instanceof FormData?r:String(r))}))]}))}))}}}},5485:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ENDPOINT_DEFS=void 0,t.ENDPOINT_DEFS=[{url:"/audio/text/audio-transcription/",inputType:"audio",outputType:"text",taskName:"audio-transcription",models:["coqui_english_huge_vocab","openai-whisper--base","openai-whisper--large","openai-whisper--large-v1","openai-whisper--large-v2","openai-whisper--medium","openai-whisper--small","openai-whisper--tiny","riva_default_asr"],defaultModel:"riva_default_asr",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",example:"http://files.gladia.io/examples/audio/text/audio-transcription/audio.wav",required:!1},{in:"formData",type:"url",name:"audio_url",example:"http://files.gladia.io/examples/audio/text/audio-transcription/audio.wav",required:!1},{in:"formData",type:"string",name:"language",example:"en-US",required:!0}],hasSamplesParam:!1},{url:"/audio/text/speaker-diarization/",inputType:"audio",outputType:"text",taskName:"speaker-diarization",models:["pyannote-speaker_diarization"],defaultModel:"pyannote-speaker_diarization",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",example:"http://files.gladia.io/examples/audio/text/audio-transcription/audio.mp3",required:!1},{in:"formData",type:"url",name:"audio_url",example:"http://files.gladia.io/examples/audio/text/audio-transcription/audio.mp3",required:!1},{in:"formData",type:"integer",name:"nb_speakers",example:0,required:!1}],hasSamplesParam:!1},{url:"/audio/text/speaker-gender-classification/",inputType:"audio",outputType:"text",taskName:"speaker-gender-classification",models:["inafoss-inaSpeechSegmenter"],defaultModel:"inafoss-inaSpeechSegmenter",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",example:"http://files.gladia.io/examples/audio/text/audio-transcription/audio.mp3",required:!1},{in:"formData",type:"url",name:"audio_url",example:"http://files.gladia.io/examples/audio/text/audio-transcription/audio.mp3",required:!1}],hasSamplesParam:!1},{url:"/image/image/background-removal/",inputType:"image",outputType:"image",taskName:"background-removal",models:["mobilenet","xception"],defaultModel:"mobilenet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/examples/image/image/background-removal/owl2.png",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/examples/image/image/background-removal/owl2.png",required:!1}],hasSamplesParam:!1},{url:"/image/image/background-replacement/",inputType:"image",outputType:"image",taskName:"background-replacement",models:["mobilenet"],defaultModel:"mobilenet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",example:"http://files.gladia.io/examples/image/image/background-removal/owl2.png",required:!1},{in:"formData",type:"url",name:"original_image_url",example:"http://files.gladia.io/examples/image/image/background-removal/owl2.png",required:!1},{in:"formData",type:"image",name:"background_image",example:"http://files.gladia.io/examples/image/image/bck-grd/green-forest.png",required:!1},{in:"formData",type:"url",name:"background_image_url",example:"http://files.gladia.io/examples/image/image/bck-grd/green-forest.png",required:!1},{in:"formData",type:"enum",name:"alignment",example:"center",required:!0,enumValues:["center","top","bottom","left","right","top-left","top-center","top-right","bottom-left","bottom-center","bottom-right","cropped"]}],hasSamplesParam:!1},{url:"/image/image/colorization/",inputType:"image",outputType:"image",taskName:"colorization",models:["deoldify-artistic","deoldify-stable","mlhubber_colorize"],defaultModel:"mlhubber_colorize",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/examples/image/image/colorization/rsz_paris.jpg",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/examples/image/image/colorization/rsz_paris.jpg",required:!1}],hasSamplesParam:!1},{url:"/image/image/deblurring/",inputType:"image",outputType:"image",taskName:"deblurring",models:["CMFNet"],defaultModel:"CMFNet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/image/image/deblurring/deblurring.png",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/image/image/deblurring/deblurring.png",required:!1}],hasSamplesParam:!1},{url:"/image/image/enhancement/",inputType:"image",outputType:"image",taskName:"enhancement",models:["FiveK","LOL"],defaultModel:"FiveK",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/image/image/enhancement/enhancement_retouching.png",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/image/image/enhancement/enhancement_retouching.png",required:!1}],hasSamplesParam:!1},{url:"/image/image/face-bluring/",inputType:"image",outputType:"image",taskName:"face-bluring",models:["ageitgey"],defaultModel:"ageitgey",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/examples/image/image/face-bluring/face-bluring.jpg",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/examples/image/image/face-bluring/face-bluring.jpg",required:!1}],hasSamplesParam:!1},{url:"/image/image/guided-inpainting/",inputType:"image",outputType:"image",taskName:"guided-inpainting",models:["compvis","runwayml"],defaultModel:"runwayml",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png",required:!1},{in:"formData",type:"url",name:"original_image_url",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png",required:!1},{in:"formData",type:"image",name:"mask_image",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png",required:!1},{in:"formData",type:"url",name:"mask_image_url",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png",required:!1},{in:"formData",type:"string",name:"prompt",example:"a cat sitting on a bench",required:!0}],hasSamplesParam:!1},{url:"/image/image/image-guided-inpainting/",inputType:"image",outputType:"image",taskName:"image-guided-inpainting",models:["fantasy-studio"],defaultModel:"fantasy-studio",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png",required:!1},{in:"formData",type:"url",name:"original_image_url",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png",required:!1},{in:"formData",type:"image",name:"example_image",example:"https://huggingface.co/spaces/Fantasy-Studio/Paint-by-Example/resolve/main/examples/reference/0.jpg",required:!1},{in:"formData",type:"url",name:"example_image_url",example:"https://huggingface.co/spaces/Fantasy-Studio/Paint-by-Example/resolve/main/examples/reference/0.jpg",required:!1},{in:"formData",type:"image",name:"mask_image",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png",required:!1},{in:"formData",type:"url",name:"mask_image_url",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png",required:!1},{in:"formData",type:"integer",name:"seed",example:424242,required:!0},{in:"formData",type:"integer",name:"steps",example:75,required:!0},{in:"formData",type:"integer",name:"guidance_scale",example:15,required:!0}],hasSamplesParam:!1},{url:"/image/image/inpainting/",inputType:"image",outputType:"image",taskName:"inpainting",models:["fcf","lama","latent-diffusion","mat","zits"],defaultModel:"zits",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png",required:!1},{in:"formData",type:"url",name:"original_image_url",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png",required:!1},{in:"formData",type:"image",name:"mask_image",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png",required:!1},{in:"formData",type:"url",name:"mask_image_url",example:"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png",required:!1}],hasSamplesParam:!1},{url:"/image/image/uncolorization/",inputType:"image",outputType:"image",taskName:"uncolorization",models:["v1"],defaultModel:"v1",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/examples/image/image/uncolorization/landscape-pics-wallpapers.png",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/examples/image/image/uncolorization/landscape-pics-wallpapers.png",required:!1}],hasSamplesParam:!1},{url:"/image/text/classification/",inputType:"image",outputType:"text",taskName:"classification",models:["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],defaultModel:"alexnet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/examples/image/text/classification/image.png",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/examples/image/text/classification/image.png",required:!1},{in:"formData",type:"integer",name:"top_k",example:1,required:!0}],hasSamplesParam:!1},{url:"/image/text/ocr/",inputType:"image",outputType:"text",taskName:"ocr",models:["easy-ocr","tesseract-default","tesseract-denoising","textract-extractor"],defaultModel:"textract-extractor",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",example:"http://files.gladia.io/examples/image/text/ocr/testocr.png",required:!1},{in:"formData",type:"url",name:"image_url",example:"http://files.gladia.io/examples/image/text/ocr/testocr.png",required:!1},{in:"formData",type:"string",name:"source_language",example:"eng",required:!0}],hasSamplesParam:!1},{url:"/text/image/image-generation/",inputType:"text",outputType:"image",taskName:"image-generation",models:["dream-studio","stable-diffusion--compvis-sd-14","stable-diffusion--runwayml-sd-15","stable-diffusion--stabilityai-sd-20","stable-diffusion--stabilityai-sd-21"],defaultModel:"stable-diffusion--stabilityai-sd-21",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"string",name:"prompt",example:"The Eiffel tower landing on the moon, unreal engine.",required:!0},{in:"formData",type:"integer",name:"samples",example:1,required:!1},{in:"formData",type:"integer",name:"steps",example:40,required:!1},{in:"formData",type:"integer",name:"seed",example:424242,required:!1}],hasSamplesParam:!0},{url:"/text/text/address-formatting/",inputType:"text",outputType:"text",taskName:"address-formatting",models:["geopy-formatter"],defaultModel:"geopy-formatter",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"address",example:"Taj Mahal, Agra, Uttar Pradesh 282001",required:!0}],hasSamplesParam:!1},{url:"/text/text/age-from-name/",inputType:"text",outputType:"text",taskName:"age-from-name",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"name",example:"Laurent",required:!0}],hasSamplesParam:!1},{url:"/text/text/anonymization/",inputType:"text",outputType:"text",taskName:"anonymization",models:["ms-presidio"],defaultModel:"ms-presidio",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"language",example:"eng",required:!0},{in:"formData",type:"string",name:"entities",example:"PERSON, LOCATION, ORGANIZATION, CREDIT_CARD, CRYPTO, DATE_TIME, DOMAIN_NAME, EMAIL_ADDRESS, IBAN_CODE, IP_ADDRESS, NRP, PASSPORT, PHONE_NUMBER, US_BANK_NUMBER, US_DRIVER_LICENSE, US_ITIN, US_PASSPORT, US_SSN, US_VEHICLE, US_ZIP_CODE",required:!0},{in:"formData",type:"string",name:"text",example:"Here are a few examples sentences we currently support:\nHello, my name is David Johnson and I live in Maine. My credit card number is 4095-2609-9393-4932 and my crypto wallet id is 16Yeky6GMjeNkAiNcBY7ZhrLoMSgg1BoyZ.\nOn September 18 I visited microsoft.com and sent an email to test@presidio.site,  from the IP 192.168.0.1.\nMy passport: 191280342 and my phone number: (212) 555-1234.\nThis is a valid International Bank Account Number: IL150120690000003111111 . Can you please check the status on bank account 954567876544?\nKate's social security number is 078-05-1126.  Her driver license? it is 1234567A.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct.\nFor more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.",required:!0}],hasSamplesParam:!1},{url:"/text/text/autocorrect/",inputType:"text",outputType:"text",taskName:"autocorrect",models:["flexudy-t5-base-multi-sentence-doctor"],defaultModel:"flexudy-t5-base-multi-sentence-doctor",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",example:"Text to corrcte",required:!0}],hasSamplesParam:!1},{url:"/text/text/bullet-point-generation/",inputType:"text",outputType:"text",taskName:"bullet-point-generation",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"Deep learning (also known as deep structured learning) is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Learning can be supervised, semi-supervised or unsupervised.[2]Deep-learning architectures such as deep neural networks, deep belief networks, deep reinforcement learning, recurrent neural networks, convolutional neural networks and Transformers have been applied to fields including computer vision, speech recognition, natural language processing, machine translation, bioinformatics, drug design, medical image analysis, climate science, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.[3][4][5]Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems. ANNs have various differences from biological brains. Specifically, artificial neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analogue.[6][7]The adjective deep in deep learning refers to the use of multiple layers in the network. Early work showed that a linear perceptron cannot be a universal classifier, but that a network with a nonpolynomial activation function with one hidden layer of unbounded width can. Deep learning is a modern variation which is concerned with an unbounded number of layers of bounded size, which permits practical application and optimized implementation, while retaining theoretical universality under mild conditions. In deep learning the layers are also permitted to be heterogeneous and to deviate widely from biologically informed connectionist models, for the sake of efficiency, trainability and understandability, hence the structured part.",required:!0},{in:"formData",type:"integer",name:"bullets",example:3,required:!1}],hasSamplesParam:!1},{url:"/text/text/command-generation/",inputType:"text",outputType:"text",taskName:"command-generation",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"Is this text hateful ?",required:!0}],hasSamplesParam:!1},{url:"/text/text/company-categorization/",inputType:"text",outputType:"text",taskName:"company-categorization",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"bouygues",required:!0}],hasSamplesParam:!1},{url:"/text/text/company-name-normalization/",inputType:"text",outputType:"text",taskName:"company-name-normalization",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"oracle inc",required:!0}],hasSamplesParam:!1},{url:"/text/text/company-stock-code/",inputType:"text",outputType:"text",taskName:"company-stock-code",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"AMZN",required:!0}],hasSamplesParam:!1},{url:"/text/text/conversation-summarization/",inputType:"text",outputType:"text",taskName:"conversation-summarization",models:["bart-large-xsum-samsum"],defaultModel:"bart-large-xsum-samsum",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"Hannah: Hey, do you have Betty's number? Amanda: Lemme check Amanda: Sorry, can't find it. Amanda: Ask Larry Amanda: He called her last time we were at the park together Hannah: I don't know him well Amanda: Don't be shy, he's very nice Hannah: If you say so.. Hannah: I'd rather you texted him Amanda: Just text him 🙂 Hannah: Urgh.. Alright Hannah: Bye Amanda: Bye bye",required:!0}],hasSamplesParam:!1},{url:"/text/text/country-from-name/",inputType:"text",outputType:"text",taskName:"country-from-name",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"name",example:"Laurent",required:!0}],hasSamplesParam:!1},{url:"/text/text/date-cleaning/",inputType:"text",outputType:"text",taskName:"date-cleaning",models:["dataprep-formatter"],defaultModel:"dataprep-formatter",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"date",example:"2/24/2003 0:00",required:!0}],hasSamplesParam:!1},{url:"/text/text/emotion-recognition/",inputType:"text",outputType:"text",taskName:"emotion-recognition",models:["mrm8488-t5-base-finetuned-emotion"],defaultModel:"mrm8488-t5-base-finetuned-emotion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"array"},params:[{in:"formData",type:"array",name:"texts",example:["I love you.","I hate you.","I am happy."],required:!0}],hasSamplesParam:!1},{url:"/text/text/gender-from-name/",inputType:"text",outputType:"text",taskName:"gender-from-name",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"name",example:"Laurent",required:!0}],hasSamplesParam:!1},{url:"/text/text/gps-address-formatting/",inputType:"text",outputType:"text",taskName:"gps-address-formatting",models:["geopy-formatter"],defaultModel:"geopy-formatter",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"float",name:"latitude",example:43.2965,required:!0},{in:"formData",type:"float",name:"longitude",example:5.36978,required:!0}],hasSamplesParam:!1},{url:"/text/text/gpt3/",inputType:"text",outputType:"text",taskName:"gpt3",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"what color is the sky ?",required:!0}],hasSamplesParam:!1},{url:"/text/text/guess-city/",inputType:"text",outputType:"text",taskName:"guess-city",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"sf",required:!0}],hasSamplesParam:!1},{url:"/text/text/guess-country/",inputType:"text",outputType:"text",taskName:"guess-country",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"fr",required:!0}],hasSamplesParam:!1},{url:"/text/text/guess-intent/",inputType:"text",outputType:"text",taskName:"guess-intent",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:'[{"start":"0.00","end":"5.00","speaker":"SPEAKER_00","sentence":"I regret to inform you that we will no longer require your services. Indeed, we believe that your participation in our activity is longer required. I hope you will understand our decision."},{"start":"5.00","end":"7.00","speaker":"SPEAKER_01","sentence":"What can I do to convince you to stay?"},{"start":"8.00","end":"15.00","speaker":"SPEAKER_00","sentence":"I guess there is nothing you can, the decision is made, I\'m sorry."}]',required:!0}],hasSamplesParam:!1},{url:"/text/text/hate-speech-detection/",inputType:"text",outputType:"text",taskName:"hate-speech-detection",models:["byt5-base-tweet-hate-detection","distilbert-base-uncased-emotion","dkleczek_Polish-Hate-Speech-Detection-Herbert-Large"],defaultModel:"distilbert-base-uncased-emotion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"I hate you piece of shit",required:!0}],hasSamplesParam:!1},{url:"/text/text/headline-generation/",inputType:"text",outputType:"text",taskName:"headline-generation",models:["jpt","michau-t5-base-en-generate-headline"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:'Very early yesterday morning, the United States President Donald Trump reported he and his wife First Lady Melania Trump tested positive for COVID-19. Officials said the Trumps\' 14-year-old son Barron tested negative as did First Family and Senior Advisors Jared Kushner and Ivanka Trump.\nTrump took to social media, posting at 12:54 am local time (0454 UTC) on Twitter, "Tonight, [Melania] and I tested positive for COVID-19. We will begin our quarantine and recovery process immediately. We will get through this TOGETHER!" Yesterday afternoon Marine One landed on the White House\'s South Lawn flying Trump to Walter Reed National Military Medical Center (WRNMMC) in Bethesda, Maryland.\nReports said both were showing "mild symptoms". Senior administration officials were tested as people were informed of the positive test. Senior advisor Hope Hicks had tested positive on Thursday.\nPresidential physician Sean Conley issued a statement saying Trump has been given zinc, vitamin D, Pepcid and a daily Aspirin. Conley also gave a single dose of the experimental polyclonal antibodies drug from Regeneron Pharmaceuticals.\nAccording to official statements, Trump, now operating from the WRNMMC, is to continue performing his duties as president during a 14-day quarantine. In the event of Trump becoming incapacitated, Vice President Mike Pence could take over the duties of president via the 25th Amendment of the US Constitution. The Pence family all tested negative as of yesterday and there were no changes regarding Pence\'s campaign events.\n',required:!0},{in:"formData",type:"integer",name:"max_length",example:16,required:!0}],hasSamplesParam:!1},{url:"/text/text/image-generation-prompt-beautifier/",inputType:"text",outputType:"text",taskName:"image-generation-prompt-beautifier",models:["ms-promptist"],defaultModel:"ms-promptist",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"prompt",example:"A rabbit is wearing a space suit",required:!0}],hasSamplesParam:!1},{url:"/text/text/keyword-extraction/",inputType:"text",outputType:"text",taskName:"keyword-extraction",models:["keybert-paraphrase-multilingual-MiniLM-L12-v2"],defaultModel:"keybert-paraphrase-multilingual-MiniLM-L12-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"The Crown is a historical drama streaming television series about the reign of Queen Elizabeth II, created and principally written by Peter Morgan, and produced by Left Bank Pictures and Sony Pictures Television for Netflix.",required:!0},{in:"formData",type:"integer",name:"top_k",example:1,required:!1}],hasSamplesParam:!1},{url:"/text/text/language-codes/",inputType:"text",outputType:"text",taskName:"language-codes",models:["language-codes"],defaultModel:"language-codes",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"language_code",example:"fra",required:!0},{in:"formData",type:"string",name:"display_output_language",example:"fra",required:!0}],hasSamplesParam:!1},{url:"/text/text/language-detection/",inputType:"text",outputType:"text",taskName:"language-detection",models:["jpt","toftrup-etal-2021"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"Input text to perform language detection on",required:!0}],hasSamplesParam:!1},{url:"/text/text/language-generation/",inputType:"text",outputType:"text",taskName:"language-generation",models:["EleutherAI-gpt-neo-2_7B","bloom-560m","gpt2_xl"],defaultModel:"gpt2_xl",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"I'm currently driving while eating a",required:!0}],hasSamplesParam:!1},{url:"/text/text/named-entity-recognition/",inputType:"text",outputType:"text",taskName:"named-entity-recognition",models:["spacy-multilingual"],defaultModel:"spacy-multilingual",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"Hugging Face Inc. is a company based in New York City. Its headquarters are in DUMBO, therefore very close to the Manhattan Bridge.",required:!0}],hasSamplesParam:!1},{url:"/text/text/next-sentence-prediction/",inputType:"text",outputType:"text",taskName:"next-sentence-prediction",models:["bert-base-uncased"],defaultModel:"bert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence_1",example:"I like you.",required:!0},{in:"formData",type:"string",name:"sentence_2",example:"But it's not about you.",required:!0}],hasSamplesParam:!1},{url:"/text/text/next-word-prediction/",inputType:"text",outputType:"text",taskName:"next-word-prediction",models:["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],defaultModel:"distilbert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",example:"I think therefore I",required:!0},{in:"formData",type:"integer",name:"top_k",example:1,required:!0}],hasSamplesParam:!1},{url:"/text/text/product-ownership/",inputType:"text",outputType:"text",taskName:"product-ownership",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"I love ETFs and have invested some money in the stock market and also have a pension plan",required:!0}],hasSamplesParam:!1},{url:"/text/text/product-sentiment/",inputType:"text",outputType:"text",taskName:"product-sentiment",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"I love ETFs and have invested some money in the stock market and also have a pension plan",required:!0}],hasSamplesParam:!1},{url:"/text/text/programming-language-generation/",inputType:"text",outputType:"text",taskName:"programming-language-generation",models:["sentdex-GPyT"],defaultModel:"sentdex-GPyT",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"code_snippet",example:"def is_palendrome(s):",required:!0}],hasSamplesParam:!1},{url:"/text/text/punctuation-restoration/",inputType:"text",outputType:"text",taskName:"punctuation-restoration",models:["oguhr-multilingualpunctuation"],defaultModel:"oguhr-multilingualpunctuation",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",example:"My name is Clara and I live in Berkeley California",required:!0}],hasSamplesParam:!1},{url:"/text/text/question-answering/",inputType:"text",outputType:"text",taskName:"question-answering",models:["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","deepset_roberta-large-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],defaultModel:"deepset_roberta-large-squad2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",example:"My name is Clara and I live in Berkeley.",required:!0},{in:"formData",type:"string",name:"question",example:"What's my name?",required:!0},{in:"formData",type:"integer",name:"top_k",example:1,required:!1}],hasSamplesParam:!1},{url:"/text/text/sentence-paraphraser/",inputType:"text",outputType:"text",taskName:"sentence-paraphraser",models:["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality","ramsrigouthamg-t5_sentence_paraphraser"],defaultModel:"ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",example:"Once, a group of frogs was roaming around the forest in search of water.",required:!0}],hasSamplesParam:!1},{url:"/text/text/sentiment-analysis/",inputType:"text",outputType:"text",taskName:"sentiment-analysis",models:["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","zero-shot-classification-facebook-bart-large-mnli"],defaultModel:"distilbert-base-uncased-finetuned-sst-2-english",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"array"},params:[{in:"formData",type:"array",name:"texts",example:["I think you are a good person.","I think you are a bad person."],required:!0}],hasSamplesParam:!1},{url:"/text/text/similarity/",inputType:"text",outputType:"text",taskName:"similarity",models:["all-MiniLM-L12-v2"],defaultModel:"all-MiniLM-L12-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence_1",example:"I like banana",required:!0},{in:"formData",type:"string",name:"sentence_2",example:"I hate banana",required:!0}],hasSamplesParam:!1},{url:"/text/text/speaker-recognition/",inputType:"text",outputType:"text",taskName:"speaker-recognition",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"speaker_001: bonjour je suis monsieur Roger president du conseil et je vais vous accompagner aujourd’hui dans ce meeting \n speaker_002; je suis Anna Clarence, secrétaire du conseil municipal et je répond à vos questions si besoin \n speaker_003: bonjour \n speaker_001: binjour \n speaker_002: bonjour à toutes et à tous  speaker_001: on y Va ? Allez Jacques à toi. \n speaker_003: merci donc bonjour à tous et à toutes on va aujourd’hui parler de jonathan qui est jaune et qui attend  \n speaker_004: merci donc oui on va parler de moi aujourd’hui ",required:!0}],hasSamplesParam:!1},{url:"/text/text/summarization/",inputType:"text",outputType:"text",taskName:"summarization",models:["all-MiniLM-L6-v2"],defaultModel:"all-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",example:"The Crown is a historical drama streaming television series about the reign of Queen Elizabeth II, created and principally written by Peter Morgan, and produced by Left Bank Pictures and Sony Pictures Television for Netflix. Morgan developed it from his drama film The Queen (2006) and especially his stage play The Audience (2013). The first season covers the period from Elizabeth's marriage to Philip, Duke of Edinburgh in 1947 to the disintegration of her sister Princess Margaret's engagement to Group Captain Peter Townsend in 1955. The second season covers the period from the Suez Crisis in 1956 to the retirement of Prime Minister Harold Macmillan in 1963 and the birth of Prince Edward in 1964. The third season spans 1964 to 1977, includes Harold Wilson's two periods as prime minister, and introduces Camilla Shand. The fourth season spans 1979 to the early 1990s and includes Margaret Thatcher's tenure as prime minister and Prince Charles's marriage to Lady Diana Spencer. The fifth and sixth seasons, which will close the series, will cover the Queen's reign into the 21st century. For each of the two-season increments, new actors fill the roles to account for the ageing process in the periods of time portrayed. Claire Foy portrays the Queen in the first two seasons, alongside Matt Smith as Prince Philip and Vanessa Kirby as Princess Margaret. For the third and fourth seasons, Olivia Colman takes over as the Queen, Tobias Menzies as Prince Philip, and Helena Bonham Carter as Princess Margaret. Also added to the cast in season 3 is Josh O'Connor as Prince Charles. In the fourth season, new cast members include Emma Corrin as Lady Diana Spencer and Gillian Anderson as Margaret Thatcher. Imelda Staunton, Jonathan Pryce, and Lesley Manville will succeed Colman, Menzies, and Bonham Carter, respectively, for the final two seasons, while Elizabeth Debicki and Dominic West are expected to assume the role of Princess Diana and Prince Charles, respectively. Filming takes place at Elstree Studios in Borehamwood, Hertfordshire, with location shooting throughout the United Kingdom and internationally. The first season was released by Netflix on 4 November 2016, the second on 8 December 2017, the third on 17 November 2019, and the fourth on 15 November 2020. The fifth season is anticipated in 2022. As of 2020, the estimated production budget of The Crown has been reported to be $260 million, making it one of the most expensive television series in history.[4] The Crown was praised by critics for its acting, directing, writing, cinematography, and production values, although its historical inaccuracies have received some criticism, particularly within the fourth season. Nonetheless, it received accolades at the 23rd Screen Actors Guild Awards, Foy won Best Actress in the lead role and Best Actor for John Lithgow as Winston Churchill, and has secured a total of sixty three nominations for its first four seasons at the Primetime Emmy Awards, including four for Outstanding Drama Series.[5] The series has also twice won the Golden Globe Award for Best Television Series - Drama, at the 74th and 78th ceremonies, with additional acting wins for Foy, Colman, Corrin, O'Connor and Anderson.[6] ",required:!0},{in:"formData",type:"string",name:"source_language",example:"eng",required:!0},{in:"formData",type:"integer",name:"min_length",example:40,required:!1},{in:"formData",type:"integer",name:"max_length",example:512,required:!1}],hasSamplesParam:!1},{url:"/text/text/translation/",inputType:"text",outputType:"text",taskName:"translation",models:["facebook-nllb-200-distilled-600M","jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"input_string",example:"Text to translate",required:!0},{in:"formData",type:"string",name:"source_language",example:"eng",required:!0},{in:"formData",type:"string",name:"target_language",example:"fra",required:!0}],hasSamplesParam:!1},{url:"/text/text/vat-country-guessing/",inputType:"text",outputType:"text",taskName:"vat-country-guessing",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"FR123456789",required:!0}],hasSamplesParam:!1},{url:"/text/text/website-classification/",inputType:"text",outputType:"text",taskName:"website-classification",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",example:"youtube.com",required:!0}],hasSamplesParam:!1},{url:"/text/text/word-alignment/",inputType:"text",outputType:"text",taskName:"word-alignment",models:["bert-base-multilingual-cased"],defaultModel:"bert-base-multilingual-cased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"input_string_language_1",example:"Sentence from first language",required:!0},{in:"formData",type:"string",name:"input_string_language_2",example:"来自 第一 语言的 句子",required:!0}],hasSamplesParam:!1},{url:"/video/text/action-classifications/",inputType:"video",outputType:"text",taskName:"action-classifications",models:["kinetics--MCG-NJU/videomae-base-finetuned-kinetics","kinetics--facebook/timesformer-base-finetuned-k400"],defaultModel:"kinetics--MCG-NJU/videomae-base-finetuned-kinetics",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"video",name:"video",example:"http://files.gladia.io/examples/video/text/classif/archery.mp4",required:!1},{in:"formData",type:"url",name:"video_url",example:"http://files.gladia.io/examples/video/text/classif/archery.mp4",required:!1}],hasSamplesParam:!1}]},3109:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContentTypeName=void 0,t.getContentTypeName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_CONTENT_TYPE")}},7896:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(655),a=n(5485);function o(){return a.ENDPOINT_DEFS}t.getEndpoints=o,t.getEndpointsByInputOutput=function(){var e,t,n=o(),a={};try{for(var i=r.__values(n),u=i.next();!u.done;u=i.next()){var s=u.value;s.inputType in a||(a[s.inputType]={}),s.outputType in a[s.inputType]||(a[s.inputType][s.outputType]=[]),a[s.inputType][s.outputType].push(s)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return a}},5309:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputEnumParamType=void 0;var r=n(4044);t.getInputEnumParamType=function(e,t){var n=(0,r.capitalizeFirst)(e.inputType),a=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName),i=(0,r.capitalizeFirst)(t.name);return"".concat(n).concat(a).concat(o,"EnumParam").concat(i)}},3485:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputEnumParamValues=void 0;var r=n(4044);t.getInputEnumParamValues=function(e,t){var n=e.inputType.toUpperCase(),a=e.outputType.toUpperCase(),o=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase(),i=t.name.toUpperCase();return"".concat(n,"_").concat(a,"_").concat(o,"_ENUM_PARAM_").concat(i,"_VALUES")}},1916:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputModelType=void 0;var r=n(4044);t.getInputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"Inputs")}},7897:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMethodName=void 0;var r=n(4044);t.getMethodName=function(e){return(0,r.kebabToCamelCase)(e.taskName)}},555:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelTypeName=void 0;var r=n(4044);t.getModelTypeName=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"Model")}},797:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelValuesName=void 0;var r=n(4044);t.getModelValuesName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),a=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase();return"".concat(t,"_").concat(n,"_").concat(a,"_MODELS")}},7179:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelTypeMultipleSamplesAsUrl=t.getOutputModelTypeOneSampleAsUrl=t.getOutputModelTypeMultipleSamples=t.getOutputModelTypeOneSample=t.getOutputModelType=void 0;var r=n(4044);t.getOutputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"Outputs")},t.getOutputModelTypeOneSample=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"OutputsOneSample")},t.getOutputModelTypeMultipleSamples=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"OutputsMultipleSamples")},t.getOutputModelTypeOneSampleAsUrl=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"OutputsOneSampleAsUrl")},t.getOutputModelTypeMultipleSamplesAsUrl=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(a,"OutputsMultipleSamplesAsUrl")}},2168:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelTypeOneSampleAsUrl=t.getOutputModelTypeMultipleSamplesAsUrl=t.getOutputModelTypeOneSample=t.getOutputModelTypeMultipleSamples=t.getOutputModelType=t.getInputEnumParamValues=t.getInputEnumParamType=t.getInputModelType=t.getModelValuesName=t.getModelTypeName=t.getMethodName=t.getContentTypeName=t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(7896);Object.defineProperty(t,"getEndpoints",{enumerable:!0,get:function(){return r.getEndpoints}}),Object.defineProperty(t,"getEndpointsByInputOutput",{enumerable:!0,get:function(){return r.getEndpointsByInputOutput}});var a=n(3109);Object.defineProperty(t,"getContentTypeName",{enumerable:!0,get:function(){return a.getContentTypeName}});var o=n(7897);Object.defineProperty(t,"getMethodName",{enumerable:!0,get:function(){return o.getMethodName}});var i=n(555);Object.defineProperty(t,"getModelTypeName",{enumerable:!0,get:function(){return i.getModelTypeName}});var u=n(797);Object.defineProperty(t,"getModelValuesName",{enumerable:!0,get:function(){return u.getModelValuesName}});var s=n(1916);Object.defineProperty(t,"getInputModelType",{enumerable:!0,get:function(){return s.getInputModelType}});var p=n(5309);Object.defineProperty(t,"getInputEnumParamType",{enumerable:!0,get:function(){return p.getInputEnumParamType}});var l=n(3485);Object.defineProperty(t,"getInputEnumParamValues",{enumerable:!0,get:function(){return l.getInputEnumParamValues}});var _=n(7179);Object.defineProperty(t,"getOutputModelType",{enumerable:!0,get:function(){return _.getOutputModelType}}),Object.defineProperty(t,"getOutputModelTypeMultipleSamples",{enumerable:!0,get:function(){return _.getOutputModelTypeMultipleSamples}}),Object.defineProperty(t,"getOutputModelTypeOneSample",{enumerable:!0,get:function(){return _.getOutputModelTypeOneSample}}),Object.defineProperty(t,"getOutputModelTypeMultipleSamplesAsUrl",{enumerable:!0,get:function(){return _.getOutputModelTypeMultipleSamplesAsUrl}}),Object.defineProperty(t,"getOutputModelTypeOneSampleAsUrl",{enumerable:!0,get:function(){return _.getOutputModelTypeOneSampleAsUrl}})},3413:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=void 0,t.SDK_VERSION="0.10.16"},4044:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.kebabToCamelCase=t.kebabToSnakeCase=t.kebabToPascalCase=t.uncapitalizeFirst=t.capitalizeFirst=void 0;var r=n(655);function a(e){return e[0].toUpperCase()+e.substring(1)}t.capitalizeFirst=a,t.uncapitalizeFirst=function(e){return e[0].toLowerCase()+e.substring(1)},t.kebabToPascalCase=function(e){return e.split("-").map((function(e){return a(e)})).join("")},t.kebabToSnakeCase=function(e){return e.replace(/-/g,"_")},t.kebabToCamelCase=function(e){var t=e.split("-");return r.__spreadArray([t.shift()],r.__read(t.map((function(e){return a(e)}))),!1).join("")}},8778:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_TEXT_COMPANY_STOCK_CODE_CONTENT_TYPE=t.TEXT_TEXT_COMPANY_STOCK_CODE_MODELS=t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_CONTENT_TYPE=t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_MODELS=t.TEXT_TEXT_COMPANY_CATEGORIZATION_CONTENT_TYPE=t.TEXT_TEXT_COMPANY_CATEGORIZATION_MODELS=t.TEXT_TEXT_COMMAND_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_COMMAND_GENERATION_MODELS=t.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_BULLET_POINT_GENERATION_MODELS=t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE=t.TEXT_TEXT_AUTOCORRECT_MODELS=t.TEXT_TEXT_ANONYMIZATION_CONTENT_TYPE=t.TEXT_TEXT_ANONYMIZATION_MODELS=t.TEXT_TEXT_AGE_FROM_NAME_CONTENT_TYPE=t.TEXT_TEXT_AGE_FROM_NAME_MODELS=t.TEXT_TEXT_ADDRESS_FORMATTING_CONTENT_TYPE=t.TEXT_TEXT_ADDRESS_FORMATTING_MODELS=t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE=t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=t.IMAGE_TEXT_OCR_CONTENT_TYPE=t.IMAGE_TEXT_OCR_MODELS=t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE=t.IMAGE_TEXT_CLASSIFICATION_MODELS=t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=t.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_INPAINTING_MODELS=t.IMAGE_IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=t.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE=t.IMAGE_IMAGE_FACE_BLURING_MODELS=t.IMAGE_IMAGE_ENHANCEMENT_CONTENT_TYPE=t.IMAGE_IMAGE_ENHANCEMENT_MODELS=t.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE=t.IMAGE_IMAGE_DEBLURRING_MODELS=t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_COLORIZATION_MODELS=t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_MODELS=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_CONTENT_TYPE=t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_MODELS=t.AUDIO_TEXT_SPEAKER_DIARIZATION_CONTENT_TYPE=t.AUDIO_TEXT_SPEAKER_DIARIZATION_MODELS=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=void 0,t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE=t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=t.TEXT_TEXT_PUNCTUATION_RESTORATION_CONTENT_TYPE=t.TEXT_TEXT_PUNCTUATION_RESTORATION_MODELS=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_PRODUCT_SENTIMENT_CONTENT_TYPE=t.TEXT_TEXT_PRODUCT_SENTIMENT_MODELS=t.TEXT_TEXT_PRODUCT_OWNERSHIP_CONTENT_TYPE=t.TEXT_TEXT_PRODUCT_OWNERSHIP_MODELS=t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=t.TEXT_TEXT_LANGUAGE_CODES_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_CODES_MODELS=t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE=t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=t.TEXT_TEXT_IMAGE_GENERATION_PROMPT_BEAUTIFIER_CONTENT_TYPE=t.TEXT_TEXT_IMAGE_GENERATION_PROMPT_BEAUTIFIER_MODELS=t.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_HEADLINE_GENERATION_MODELS=t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=t.TEXT_TEXT_GUESS_INTENT_CONTENT_TYPE=t.TEXT_TEXT_GUESS_INTENT_MODELS=t.TEXT_TEXT_GUESS_COUNTRY_CONTENT_TYPE=t.TEXT_TEXT_GUESS_COUNTRY_MODELS=t.TEXT_TEXT_GUESS_CITY_CONTENT_TYPE=t.TEXT_TEXT_GUESS_CITY_MODELS=t.TEXT_TEXT_GPT3_CONTENT_TYPE=t.TEXT_TEXT_GPT3_MODELS=t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_CONTENT_TYPE=t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_MODELS=t.TEXT_TEXT_GENDER_FROM_NAME_CONTENT_TYPE=t.TEXT_TEXT_GENDER_FROM_NAME_MODELS=t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=t.TEXT_TEXT_DATE_CLEANING_CONTENT_TYPE=t.TEXT_TEXT_DATE_CLEANING_MODELS=t.TEXT_TEXT_COUNTRY_FROM_NAME_CONTENT_TYPE=t.TEXT_TEXT_COUNTRY_FROM_NAME_MODELS=t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_MODELS=void 0,t.VIDEO_TEXT_ACTION_CLASSIFICATIONS_CONTENT_TYPE=t.VIDEO_TEXT_ACTION_CLASSIFICATIONS_MODELS=t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE=t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=t.TEXT_TEXT_WEBSITE_CLASSIFICATION_CONTENT_TYPE=t.TEXT_TEXT_WEBSITE_CLASSIFICATION_MODELS=t.TEXT_TEXT_VAT_COUNTRY_GUESSING_CONTENT_TYPE=t.TEXT_TEXT_VAT_COUNTRY_GUESSING_MODELS=t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE=t.TEXT_TEXT_TRANSLATION_MODELS=t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_SUMMARIZATION_MODELS=t.TEXT_TEXT_SPEAKER_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_SPEAKER_RECOGNITION_MODELS=t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE=t.TEXT_TEXT_SIMILARITY_MODELS=t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE=t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE=t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=void 0,t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=["coqui_english_huge_vocab","openai-whisper--base","openai-whisper--large","openai-whisper--large-v1","openai-whisper--large-v2","openai-whisper--medium","openai-whisper--small","openai-whisper--tiny","riva_default_asr"],t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE="multipart/form-data",t.AUDIO_TEXT_SPEAKER_DIARIZATION_MODELS=["pyannote-speaker_diarization"],t.AUDIO_TEXT_SPEAKER_DIARIZATION_CONTENT_TYPE="multipart/form-data",t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_MODELS=["inafoss-inaSpeechSegmenter"],t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=["mobilenet","xception"],t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_MODELS=["mobilenet"],t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_COLORIZATION_MODELS=["deoldify-artistic","deoldify-stable","mlhubber_colorize"],t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_DEBLURRING_MODELS=["CMFNet"],t.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_ENHANCEMENT_MODELS=["FiveK","LOL"],t.IMAGE_IMAGE_ENHANCEMENT_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_FACE_BLURING_MODELS=["ageitgey"],t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=["compvis","runwayml"],t.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=["fantasy-studio"],t.IMAGE_IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_INPAINTING_MODELS=["fcf","lama","latent-diffusion","mat","zits"],t.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=["v1"],t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_CLASSIFICATION_MODELS=["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_OCR_MODELS=["easy-ocr","tesseract-default","tesseract-denoising","textract-extractor"],t.IMAGE_TEXT_OCR_CONTENT_TYPE="multipart/form-data",t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=["dream-studio","stable-diffusion--compvis-sd-14","stable-diffusion--runwayml-sd-15","stable-diffusion--stabilityai-sd-20","stable-diffusion--stabilityai-sd-21"],t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ADDRESS_FORMATTING_MODELS=["geopy-formatter"],t.TEXT_TEXT_ADDRESS_FORMATTING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AGE_FROM_NAME_MODELS=["jpt"],t.TEXT_TEXT_AGE_FROM_NAME_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ANONYMIZATION_MODELS=["ms-presidio"],t.TEXT_TEXT_ANONYMIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AUTOCORRECT_MODELS=["flexudy-t5-base-multi-sentence-doctor"],t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_BULLET_POINT_GENERATION_MODELS=["jpt"],t.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMMAND_GENERATION_MODELS=["jpt"],t.TEXT_TEXT_COMMAND_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMPANY_CATEGORIZATION_MODELS=["jpt"],t.TEXT_TEXT_COMPANY_CATEGORIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_MODELS=["jpt"],t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMPANY_STOCK_CODE_MODELS=["jpt"],t.TEXT_TEXT_COMPANY_STOCK_CODE_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_MODELS=["bart-large-xsum-samsum"],t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COUNTRY_FROM_NAME_MODELS=["jpt"],t.TEXT_TEXT_COUNTRY_FROM_NAME_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_DATE_CLEANING_MODELS=["dataprep-formatter"],t.TEXT_TEXT_DATE_CLEANING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=["mrm8488-t5-base-finetuned-emotion"],t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GENDER_FROM_NAME_MODELS=["jpt"],t.TEXT_TEXT_GENDER_FROM_NAME_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_MODELS=["geopy-formatter"],t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GPT3_MODELS=["jpt"],t.TEXT_TEXT_GPT3_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GUESS_CITY_MODELS=["jpt"],t.TEXT_TEXT_GUESS_CITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GUESS_COUNTRY_MODELS=["jpt"],t.TEXT_TEXT_GUESS_COUNTRY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GUESS_INTENT_MODELS=["jpt"],t.TEXT_TEXT_GUESS_INTENT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=["byt5-base-tweet-hate-detection","distilbert-base-uncased-emotion","dkleczek_Polish-Hate-Speech-Detection-Herbert-Large"],t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HEADLINE_GENERATION_MODELS=["jpt","michau-t5-base-en-generate-headline"],t.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_IMAGE_GENERATION_PROMPT_BEAUTIFIER_MODELS=["ms-promptist"],t.TEXT_TEXT_IMAGE_GENERATION_PROMPT_BEAUTIFIER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=["keybert-paraphrase-multilingual-MiniLM-L12-v2"],t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_CODES_MODELS=["language-codes"],t.TEXT_TEXT_LANGUAGE_CODES_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=["jpt","toftrup-etal-2021"],t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=["EleutherAI-gpt-neo-2_7B","bloom-560m","gpt2_xl"],t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=["spacy-multilingual"],t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=["bert-base-uncased"],t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PRODUCT_OWNERSHIP_MODELS=["jpt"],t.TEXT_TEXT_PRODUCT_OWNERSHIP_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PRODUCT_SENTIMENT_MODELS=["jpt"],t.TEXT_TEXT_PRODUCT_SENTIMENT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=["sentdex-GPyT"],t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PUNCTUATION_RESTORATION_MODELS=["oguhr-multilingualpunctuation"],t.TEXT_TEXT_PUNCTUATION_RESTORATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","deepset_roberta-large-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality","ramsrigouthamg-t5_sentence_paraphraser"],t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","zero-shot-classification-facebook-bart-large-mnli"],t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SIMILARITY_MODELS=["all-MiniLM-L12-v2"],t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SPEAKER_RECOGNITION_MODELS=["jpt"],t.TEXT_TEXT_SPEAKER_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SUMMARIZATION_MODELS=["all-MiniLM-L6-v2"],t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_TRANSLATION_MODELS=["facebook-nllb-200-distilled-600M","jpt"],t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_VAT_COUNTRY_GUESSING_MODELS=["jpt"],t.TEXT_TEXT_VAT_COUNTRY_GUESSING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WEBSITE_CLASSIFICATION_MODELS=["jpt"],t.TEXT_TEXT_WEBSITE_CLASSIFICATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=["bert-base-multilingual-cased"],t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE="application/x-www-form-urlencoded",t.VIDEO_TEXT_ACTION_CLASSIFICATIONS_MODELS=["kinetics--MCG-NJU/videomae-base-finetuned-kinetics","kinetics--facebook/timesformer-base-finetuned-k400"],t.VIDEO_TEXT_ACTION_CLASSIFICATIONS_CONTENT_TYPE="multipart/form-data"},2764:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655);n(9601),n(9720),n(8559),n(8674),r.__exportStar(n(3465),t);var a=r.__importStar(n(3465));t.default=a.default},1551:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PreviewFeatureError=void 0;var r=n(655),a=function(e){function t(){return e.call(this,"This feature is not available without enabling preview feature.")||this}return r.__extends(t,e),t}(Error);t.PreviewFeatureError=a},6117:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNotDefined=t.isDefined=void 0,t.isDefined=function(e){return null!=e},t.isNotDefined=function(e){return null==e}},2683:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.applyMixins=void 0,t.applyMixins=function(e,t){t.forEach((function(t){Object.getOwnPropertyNames(t.prototype).forEach((function(n){Object.defineProperty(e.prototype,n,Object.getOwnPropertyDescriptor(t.prototype,n)||Object.create(null))}))}))}},655:function(e,t,n){"use strict";n.r(t),n.d(t,{__assign:function(){return o},__asyncDelegator:function(){return N},__asyncGenerator:function(){return h},__asyncValues:function(){return v},__await:function(){return y},__awaiter:function(){return l},__classPrivateFieldGet:function(){return b},__classPrivateFieldIn:function(){return A},__classPrivateFieldSet:function(){return w},__createBinding:function(){return d},__decorate:function(){return u},__exportStar:function(){return T},__extends:function(){return a},__generator:function(){return _},__importDefault:function(){return I},__importStar:function(){return C},__makeTemplateObject:function(){return x},__metadata:function(){return p},__param:function(){return s},__read:function(){return c},__rest:function(){return i},__spread:function(){return f},__spreadArray:function(){return E},__spreadArrays:function(){return g},__values:function(){return m}});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},o.apply(this,arguments)};function i(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}function u(e,t,n,r){var a,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(a=e[u])&&(i=(o<3?a(i):o>3?a(t,n,i):a(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function s(e,t){return function(n,r){t(n,r,e)}}function p(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}))}function _(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}var d=Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function T(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||d(t,e,n)}function m(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}function f(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(c(arguments[t]));return e}function g(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,u=o.length;i<u;i++,a++)r[a]=o[i];return r}function E(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function h(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=a[e](t)).value instanceof y?Promise.resolve(n.value.v).then(s,p):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function s(e){u("next",e)}function p(e){u("throw",e)}function l(e,t){e(t),o.shift(),o.length&&u(o[0][0],o[0][1])}}function N(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,a){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:a?a(t):t}:a}}function v(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=m(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,a){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,a,(t=e[n](t)).done,t.value)}))}}}function x(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var O=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function C(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&d(t,e,n);return O(t,e),t}function I(e){return e&&e.__esModule?e:{default:e}}function b(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function w(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n}function A(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}},5426:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n(2764);return r.default}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,